<Application x:Class="ComponentBuilder.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:syscm="clr-namespace:System.ComponentModel;assembly=PresentationFramework"
             xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase"
             xmlns:cbwsc="clr-namespace:ComponentBuilder.WebServiceConnections"
             xmlns:cbwpfu="clr-namespace:ComponentBuilder.WpfUtils"
             xmlns:cbwinu="clr-namespace:ComponentBuilder.WinUtils"
             xmlns:cduie="clr-namespace:ComponentBuilder.UIElements"
             xmlns:psmv="clr-namespace:ParameterStructure.Values;assembly=ParameterStructure"
             xmlns:psp="clr-namespace:ParameterStructure.Parameter;assembly=ParameterStructure"
             xmlns:pscomp="clr-namespace:ParameterStructure.Component;assembly=ParameterStructure"
             xmlns:psu="clr-namespace:ParameterStructure.Utils;assembly=ParameterStructure"
             xmlns:psgr="clr-namespace:ParameterStructure.Geometry;assembly=ParameterStructure"
             xmlns:psmap="clr-namespace:ParameterStructure.Mapping;assembly=ParameterStructure"
             xmlns:ipc="clr-namespace:InterProcCommunication;assembly=InterProcCommunication"
             StartupUri="MainWindow.xaml">
    <Application.Resources>

        <cbwinu:GeneralCommands x:Key="GeneralCommands"/>
        
        <sys:Boolean x:Key="FalseValue">False</sys:Boolean>
        <sys:Boolean x:Key="TrueValue">True</sys:Boolean>

        <cbwpfu:ObjectToIsNullAsBoolenConverter x:Key="ObjectToIsNullAsBoolenConverter"/>
        <cbwpfu:DoubleToStringConverter x:Key="DoubleToStringConverter"/>
        <cbwpfu:DoubleStringToStringConverter x:Key="DoubleStringToStringConverter"/>
        <cbwpfu:StringToStringWoSpacesConverter x:Key="StringToStringWoSpacesConverter"/>
        <cbwpfu:InputToIntConverter x:Key="InputToIntConverter"/>
        <cbwpfu:BoolToWinMediaColorConverter x:Key="BoolToWinMediaColorConverter"/>
        <cbwpfu:BoolToWinMediaColorWOpacityConverter x:Key="BoolToWinMediaColorWOpacityConverter"/>
        <cbwpfu:BoolToWinMediaColorWOpacityConverter1 x:Key="BoolToWinMediaColorWOpacityConverter1"/>
        <cbwpfu:BoolToWinMediaColorWOpacityConverter2 x:Key="BoolToWinMediaColorWOpacityConverter2"/>
        <cbwpfu:BoolToOpacityConverter x:Key="BoolToOpacityConverter"/>
        <cbwpfu:BoolToOpacityConverter1 x:Key="BoolToOpacityConverter1"/>
        <cbwpfu:DateTimeToWinMediaColorConverter x:Key="DateTimeToWinMediaColorConverter" MinutesFromNow="2" MinutesFromNow_Fast="0.1"/>
        <cbwpfu:IntToWinMediaColorFormCompSlotsConverter x:Key="IntToWinMediaColorFormCompSlotsConverter"/>

        <cbwpfu:BoolAndConverter x:Key="BoolAndConverter"/>

        <cbwpfu:TreeDepthToLengthConverter InitLength="180" Factor="-19" x:Key="TreeDepthToLengthConverter" />
        <cbwpfu:TreeDepthToLengthConverter InitLength="80" Factor="-19" x:Key="TreeDepthToLengthConverter_NW" />
        <cbwpfu:TreeDepthToOffsetConverter Factor="10" x:Key="TreeDepthToOffsetConverter"/>
        <cbwpfu:TreeViewGroupingAccToParameterConverter x:Key="TreeViewGroupingAccToParameterConverter"/>
        <cbwpfu:ListViewGroupingAccToMulitValueTypeConverter x:Key="ListViewGroupingAccToMulitValueTypeConverter"/>

        <cbwpfu:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
        <cbwpfu:BooleanToVisibiltyConverter x:Key="BooleanToVisibiltyConverter"/>
        <cbwpfu:BooleanToRadiusSizeConverter x:Key="BooleanToRadiusSizeConverter"/>
        <cbwpfu:TypeToBoolConverter x:Key="TypeToBoolConverter"/>
        <cbwpfu:IntToBoolConverter x:Key="IntToBoolConverter"/>
        
        <cbwpfu:GuiModusToBooleanConverter x:Key="GuiModusToBooleanConverter"/>
        <cbwpfu:GuiModusToStringConverter x:Key="GuiModusToStringConverter"/>
        <cbwpfu:Relation2GeomTypeToBooleanConverter x:Key="Relation2GeomTypeToBooleanConverter"/>
        <cbwpfu:Relation2GeomTypeToStringConverter x:Key="Relation2GeomTypeToStringConverter"/>
        
        <cbwpfu:CategoryToStringConverter x:Key="CategoryToStringConverter"/>
        <cbwpfu:CategoryToSparseStringConverter x:Key="CategoryToSparseStringConverter"/>
        <cbwpfu:CategoryToLetterConverter x:Key="CategoryToLetterConverter"/>
        <cbwpfu:LetterCollectionToCategoryConverter x:Key="LetterCollectionToCategoryConverter"/>
        <cbwpfu:InfoFlowToLetterConverter x:Key="InfoFlowToLetterConverter"/>
        <cbwpfu:InfoFlowToWMColorConverter x:Key="InfoFlowToWMColorConverter"/>
        <cbwpfu:InfoFlowToMultiWMColorConverter x:Key="InfoFlowToMultiWMColorConverter"/>
        <cbwpfu:CompResultToMultiWMColorConverter x:Key="CompResultToMultiWMColorConverter"/>
        <cbwpfu:ObjectCollectionToParameterConverter x:Key="ObjectCollectionToParameterConverter"/>

        <cbwpfu:IsParameterToBoolConverter x:Key="IsParameterToBoolConverter"/>
        <cbwpfu:IsCalculationToBoolConverter x:Key="IsCalculationToBoolConverter"/>
        <cbwpfu:IsComponentToBoolConverter x:Key="IsComponentToBoolConverter"/>
        <cbwpfu:IsVisibleComponentToBoolConverter x:Key="IsVisibleComponentToBoolConverter"/>
        <cbwpfu:IsNotCalculationToBoolConverter x:Key="IsNotCalculationToBoolConverter"/>
        <cbwpfu:IsNetworkToBoolConverter x:Key="IsNetworkToBoolConverter"/>
        <cbwpfu:CompManagerTypeToLetterConverter x:Key="CompManagerTypeToLetterConverter"/>
        <cbwpfu:CompManagerTypeToBoolConverter x:Key="CompManagerTypeToBoolConverter"/>
        <cbwpfu:ComponentManagerTypeToDescrConverter x:Key="ComponentManagerTypeToDescrConverter"/>
        <cbwpfu:ComponentValidityToDescrConverter x:Key="ComponentValidityToDescrConverter"/>
        <cbwpfu:ComponentValidityToColorConverter x:Key="ComponentValidityToColorConverter"/>
        <cbwpfu:SlotSizeToIntConverter x:Key="SlotSizeToIntConverter"/>

        <cbwsc:TypeNodeContentBindingTypeToBooleanConverter x:Key="TypeNodeContentBindingTypeToBooleanConverter"/>

        <cbwpfu:MultiValueToStringConverter x:Key="MultiValueToStringConverter"/>

        <cbwpfu:PointToStringConverter x:Key="PointToStringConverter"/>
        <cbwpfu:ValidityToWinMediaColorConverter x:Key="ValidityToWinMediaColorConverter"/>

        <ipc:LoggerEntryTypeToWColorConverter x:Key="LoggerEntryTypeToWColorConverter"/>

        <cbwpfu:ValueConverterGroup x:Key="IntToVisibilityConverterGroup">
            <cbwpfu:IntToBoolConverter/>
            <cbwpfu:BooleanToVisibiltyConverter/>
        </cbwpfu:ValueConverterGroup>

        <cbwpfu:ValueConverterGroup x:Key="IntToReverseVisibilityConverterGroup">
            <cbwpfu:IntToBoolConverter/>
            <cbwpfu:InverseBooleanConverter/>
            <cbwpfu:BooleanToVisibiltyConverter/>
        </cbwpfu:ValueConverterGroup>
        
        <cbwpfu:ValueConverterGroup x:Key="ReverseBoolToVisConverterGroup">
            <cbwpfu:InverseBooleanConverter/>
            <cbwpfu:BooleanToVisibiltyConverter/>
        </cbwpfu:ValueConverterGroup>
        
        <cbwpfu:ValueConverterGroup x:Key="ReverseBoolToOpacityConverterGroup">
            <cbwpfu:InverseBooleanConverter/>
            <cbwpfu:BoolToOpacityConverter/>
        </cbwpfu:ValueConverterGroup>

        <cbwpfu:ValueConverterGroup x:Key="ReverseGuiModeToBoolConverterGroup">
            <cbwpfu:GuiModusToBooleanConverter/>
            <cbwpfu:InverseBooleanConverter/>
        </cbwpfu:ValueConverterGroup>

        <cbwpfu:ValueConverterGroup x:Key="GuiModeToVisConverterGroup">
            <cbwpfu:GuiModusToBooleanConverter/>
            <cbwpfu:BooleanToVisibiltyConverter/>
        </cbwpfu:ValueConverterGroup>
        
        <cbwpfu:ValueConverterGroup x:Key="ReverseGuiModeToVisConverterGroup">
            <cbwpfu:GuiModusToBooleanConverter/>
            <cbwpfu:InverseBooleanConverter/>
            <cbwpfu:BooleanToVisibiltyConverter/>
        </cbwpfu:ValueConverterGroup>

        <cbwpfu:ValueConverterGroup x:Key="Relation2GeomTypeToVisibiltyConverterGroup">
            <cbwpfu:Relation2GeomTypeToBooleanConverter/>
            <cbwpfu:BooleanToVisibiltyConverter/>
        </cbwpfu:ValueConverterGroup>

        <cbwpfu:ValueConverterGroup x:Key="ParameterTypeToVisibilityConverterGroup">
            <cbwpfu:TypeToBoolConverter/>
            <cbwpfu:BooleanToVisibiltyConverter/>
        </cbwpfu:ValueConverterGroup>

        <cbwpfu:ValueConverterGroup x:Key="CompManagerTypeToVisibilityConverterGroup">
            <cbwpfu:CompManagerTypeToBoolConverter/>
            <cbwpfu:BooleanToVisibiltyConverter/>
        </cbwpfu:ValueConverterGroup>

        <cbwpfu:ValueConverterGroup x:Key="LoggerEntryTypeVisibiltyConverterGroup">
            <ipc:LoggerEntryTypeToBoolConverter/>
            <cbwpfu:BooleanToVisibiltyConverter/>
        </cbwpfu:ValueConverterGroup>

        <cbwpfu:ValueConverterGroup x:Key="TypeNodeContentBindingTypeToVisibiltyConverterGroup">
            <cbwsc:TypeNodeContentBindingTypeToBooleanConverter/>
            <cbwpfu:BooleanToVisibiltyConverter/>
        </cbwpfu:ValueConverterGroup>

        <cbwpfu:ComponentDataTemplateSelector x:Key="ComponentDataTemplateSelector"/>
        <cbwpfu:ComponentDataTemplateSelector_Inst x:Key="ComponentDataTemplateSelector_Inst"/>
        <cbwpfu:ComponentDataTemplateSelectorMapping x:Key="ComponentDataTemplateSelectorMapping"/>
        <cbwpfu:ComponentDataTemplateSelectorMappingToWebServ x:Key="ComponentDataTemplateSelectorMappingToWebServ"/>
        <cbwpfu:ParameterChildrenTemplateSelectorShort x:Key="ParameterChildrenTemplateSelectorShort"/>
        <cbwpfu:FlowNetworkDataTemplateSelector x:Key="FlowNetworkDataTemplateSelector"/>

        <Style x:Key="MainExpander" TargetType="{x:Type Expander}">
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Top"/>
            <Setter Property="Width" Value="Auto"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="BorderBrush" Value="Black"/>
            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Opacity="1" Color="Gainsboro"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="syscm:DesignerProperties.IsInDesignMode"  Value="True">
                    <Setter Property="Visibility" Value="Visible"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="SpecializedExpander" TargetType="{x:Type Expander}" BasedOn="{StaticResource MainExpander}">
            <Setter Property="BorderBrush" Value="DimGray"/>
            <Setter Property="Foreground" Value="DimGray"/>
            <Style.Triggers>              
                <Trigger Property="IsEnabled" Value="True">
                    <Setter Property="BorderThickness" Value="2"/>
                    <Setter Property="BorderBrush" Value="Black"/>
                    <Setter Property="Foreground" Value="Black"/>
                    <Setter Property="Effect">
                        <Setter.Value>
                            <DropShadowEffect Color="#FF0000FF" Opacity="0.5" Direction="315" BlurRadius="3" ShadowDepth="5"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="TabItem_ValueField1"  TargetType="TabItem">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TabItem">
                        <Grid Name="Panel">
                            <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                        Margin="10,2"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Panel" Property="Background" Value="Gainsboro" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="False">
                                <Setter TargetName="Panel" Property="Background" Value="#FFB0B0B0" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="TabItem_ValueField" TargetType="{x:Type TabItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabItem}">
                        <Grid>
                            <Border 
                                Name="Border"
                                Margin="0,0,-4,0" 
                                Background="Gainsboro"
                                BorderBrush="DimGray" 
                                BorderThickness="1,0,1,1" 
                                CornerRadius="0,0,10,4" >
                                <ContentPresenter x:Name="ContentSite"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Center"
                                    ContentSource="Header"
                                    Margin="12,2,12,2"
                                    RecognizesAccessKey="True"/>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Panel.ZIndex" Value="100" />
                                <Setter TargetName="Border" Property="Background" Value="#FFDCCBBB" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="Red" />
                                <Setter TargetName="Border" Property="BorderThickness" Value="1,0,1,1" />
                                <Setter Property="Foreground" Value="Red" />
                                <Setter Property="FontWeight" Value="Bold"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Border" Property="Background" Value="#FFEEEEEE" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="#FFAAAAAA" />
                                <Setter Property="Foreground" Value="#FF888888" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="TabItem_ValueField_Input" TargetType="{x:Type TabItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabItem}">
                        <Grid>
                            <Border 
                                Name="Border"
                                Margin="0,0,-4,0" 
                                Background="Gainsboro"
                                BorderBrush="DimGray" 
                                BorderThickness="1,0,1,1" 
                                CornerRadius="0,0,10,4" >
                                <ContentPresenter x:Name="ContentSite"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Left"
                                    ContentSource="Tag"
                                    Margin="12,2,12,2"
                                    RecognizesAccessKey="True"/>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Panel.ZIndex" Value="100" />
                                <Setter TargetName="Border" Property="Background" Value="#FFBBBCCD" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="Blue" />
                                <Setter TargetName="Border" Property="BorderThickness" Value="1,0,1,1" />
                                <Setter Property="Foreground" Value="OrangeRed" />
                                <Setter Property="FontWeight" Value="Bold"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Border" Property="Background" Value="#FFAAAAAA" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="#FFAAAAAA" />
                                <Setter Property="Foreground" Value="#FF888888" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="ReliefButton" TargetType="Button">
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="#FFDADADA" Offset="0"/>
                        <GradientStop Color="White" Offset="0.15"/>
                        <GradientStop Color="#FFDADADA" Offset="0.20"/>
                        <GradientStop Color="#FFAAAAAA" Offset="0.85"/>
                        <GradientStop Color="#FF595959" Offset="1"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="Black"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="#FFBFBFBF"/>
                    <Setter Property="BorderBrush" Value="#FF919191"/>
                    <Setter Property="Foreground" Value="#FF898989"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="#FFFFD35F"/>
                    <Setter Property="BorderBrush" Value="White"/>
                    <Setter Property="Foreground" Value="White"/>
                </Trigger>
            </Style.Triggers>
            <Style.Resources>
                <Style TargetType="Image">
                    <Style.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.35" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Style.Resources>
        </Style>

        <Style x:Key="ReliefButtonStrong" TargetType="Button">
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="#FFDADADA" Offset="0"/>
                        <GradientStop Color="#FFFFD761" Offset="0.10"/>
                        <GradientStop Color="White" Offset="0.20"/>
                        <GradientStop Color="#FFDADADA" Offset="0.30"/>
                        <GradientStop Color="#FFAAAAAA" Offset="0.75"/>
                        <GradientStop Color="#FF5A5AAA" Offset="0.90"/>
                        <GradientStop Color="#FF595959" Offset="1"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="Black"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="#FFBFBFBF"/>
                    <Setter Property="BorderBrush" Value="#FF919191"/>
                    <Setter Property="Foreground" Value="#FF898989"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="#FFFFD35F"/>
                    <Setter Property="BorderBrush" Value="White"/>
                    <Setter Property="Foreground" Value="White"/>
                </Trigger>
            </Style.Triggers>
            <Style.Resources>
                <Style TargetType="Image">
                    <Style.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.35" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Style.Resources>
        </Style>

        <Style x:Key="ReliefButtonRound" TargetType="Button">
            <Setter Property="Background">
                <Setter.Value>
                    <RadialGradientBrush GradientOrigin="0.5,1.0">
                        <RadialGradientBrush.RelativeTransform>
                            <TransformGroup>
                                <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.5" ScaleY="1.5"/>
                                <TranslateTransform X="0.2" Y="0.2"/>
                            </TransformGroup>
                        </RadialGradientBrush.RelativeTransform>
                        <GradientStop Color="#FF8A8A8A" Offset="0"/>
                        <GradientStop Color="#FF595959" Offset="0.15"/>
                        <GradientStop Color="#FF8A8A8A" Offset="0.20"/>
                        <GradientStop Color="#FF9B9B9B" Offset="0.70"/>
                        <GradientStop Color="#FFCCCCCC" Offset="0.85"/>
                        <GradientStop Color="#FFAAAAAA" Offset="1"/>
                    </RadialGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="#FF8F8F8F"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="#FF5D5D5D"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="12"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="#FF9B9B9B"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="Foreground" Value="#FF777777"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="#FFA3A3FF"/>
                    <Setter Property="BorderBrush" Value="Black"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="Foreground" Value="Black"/>
                </Trigger>
            </Style.Triggers>
            <Style.Resources>
                <Style TargetType="Image">
                    <Style.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.35" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Style.Resources>
        </Style>
        
        
        <Style x:Key="ReliefButtonInportant" TargetType="Button" BasedOn="{StaticResource ReliefButton}">
            <Setter Property="BorderThickness" Value="2"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
 
        <Style x:Key="ReliefButtonBlue" TargetType="Button">
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="#FFcfcfff" Offset="0"/>
                        <GradientStop Color="White" Offset="0.15"/>
                        <GradientStop Color="#FFcfcfff" Offset="0.20"/>
                        <GradientStop Color="#FF9f9fff" Offset="0.85"/>
                        <GradientStop Color="#FF2222e8" Offset="1"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="Black"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="#FFBFBFBF"/>
                    <Setter Property="BorderBrush" Value="#FF919191"/>
                    <Setter Property="Foreground" Value="#FF898989"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="#FF6363FF"/>
                    <Setter Property="BorderBrush" Value="White"/>
                    <Setter Property="Foreground" Value="White"/>
                </Trigger>
            </Style.Triggers>
            <Style.Resources>
                <Style TargetType="Image">
                    <Style.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.35" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Style.Resources>
        </Style>

        <Style x:Key="ReliefButtonOrange" TargetType="Button">
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="#FFffe7cf" Offset="0"/>
                        <GradientStop Color="White" Offset="0.15"/>
                        <GradientStop Color="#FFffe7cf" Offset="0.20"/>
                        <GradientStop Color="#FFffcf9f" Offset="0.85"/>
                        <GradientStop Color="#FFe88522" Offset="1"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="Black"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="#FFBFBFBF"/>
                    <Setter Property="BorderBrush" Value="#FF919191"/>
                    <Setter Property="Foreground" Value="#FF898989"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="#FFffb163"/>
                    <Setter Property="BorderBrush" Value="White"/>
                    <Setter Property="Foreground" Value="White"/>
                </Trigger>
            </Style.Triggers>
            <Style.Resources>
                <Style TargetType="Image">
                    <Style.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.35" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Style.Resources>
        </Style>

        <Style x:Key="ReliefHrztButton" TargetType="Button" BasedOn="{StaticResource ReliefButton}">
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
                        <GradientStop Color="Gainsboro" Offset="0"/>
                        <GradientStop Color="White" Offset="0.10"/>
                        <GradientStop Color="#FFDADADA" Offset="0.15"/>
                        <GradientStop Color="#FFDADADA" Offset="0.50"/>
                        <GradientStop Color="#FFAAAAAA" Offset="0.90"/>
                        <GradientStop Color="Gainsboro" Offset="1"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="#FFAAAAAA"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="BorderBrush" Value="Black"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="ReliefHiddenBlueButton" TargetType="Button" BasedOn="{StaticResource ReliefButton}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                <GradientStop Color="#FFd7d7ff" Offset="0"/>
                                <GradientStop Color="White" Offset="0.10"/>
                                <GradientStop Color="White" Offset="0.14"/>
                                <GradientStop Color="#FFddddff" Offset="0.15"/>
                                <GradientStop Color="#FFddddff" Offset="0.50"/>
                                <GradientStop Color="#FF9999ff" Offset="0.90"/>
                                <GradientStop Color="#FFd7d7ff" Offset="1"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="BorderBrush" Value="Black"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="ToggleButtonLight" TargetType="ToggleButton">
            <Setter Property="Height" Value="25"/>
            <Setter Property="Width" Value="70"/>
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="#FFDADADA" Offset="0"/>
                        <GradientStop Color="White" Offset="0.15"/>
                        <GradientStop Color="#FFDADADA" Offset="0.20"/>
                        <GradientStop Color="#FFAAAAAA" Offset="0.85"/>
                        <GradientStop Color="#FF595959" Offset="1"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="Black"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="#FF2C2C2C"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                <GradientStop Color="#FF919191" Offset="0"/>
                                <GradientStop Color="#FFC37C00" Offset="0.154"/>
                                <GradientStop Color="#FFC9A274" Offset="0.854"/>
                                <GradientStop Color="#FFDADADA" Offset="0.95"/>
                                <GradientStop Color="#FFB6B6B6" Offset="1"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="BorderBrush" Value="#FFFFD35F"/>
                    <Setter Property="BorderThickness" Value="3"/>
                    <Setter Property="Foreground" Value="White"/>
                    <Setter Property="FontWeight" Value="Bold"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2">
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="#FFDADADA"/>
                    <Setter Property="BorderBrush" Value="#FF919191"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="Foreground" Value="DimGray"/>
                    <Setter Property="FontWeight" Value="Normal"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2">
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
            <Style.Resources>
                <Style TargetType="Image">
                    <Style.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.35" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Style.Resources>
        </Style>

        <Style x:Key="ToggleButtonRed" TargetType="ToggleButton">
            <Setter Property="Height" Value="25"/>
            <Setter Property="Width" Value="70"/>
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="#FFDADADA" Offset="0"/>
                        <GradientStop Color="White" Offset="0.15"/>
                        <GradientStop Color="#FFDADADA" Offset="0.20"/>
                        <GradientStop Color="#FFAAAAAA" Offset="0.85"/>
                        <GradientStop Color="#FF595959" Offset="1"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="Black"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="#FF2C2C2C"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                <GradientStop Color="#FF919191" Offset="0"/>
                                <GradientStop Color="#FFC33100" Offset="0.154"/>
                                <GradientStop Color="#FFC98974" Offset="0.854"/>
                                <GradientStop Color="#FFDADADA" Offset="0.95"/>
                                <GradientStop Color="#FFB6B6B6" Offset="1"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="BorderBrush" Value="#FFFFFFFF"/>
                    <Setter Property="BorderThickness" Value="2"/>
                    <Setter Property="Foreground" Value="White"/>
                    <Setter Property="FontWeight" Value="Bold"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Effect">
                        <Setter.Value>
                            <DropShadowEffect Color="#FFFF4500" Opacity="1" BlurRadius="2" ShadowDepth="2" Direction="145"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="#FFDADADA"/>
                    <Setter Property="BorderBrush" Value="#FF919191"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="Foreground" Value="DimGray"/>
                    <Setter Property="FontWeight" Value="Normal"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
            <Style.Resources>
                <Style TargetType="Image">
                    <Style.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.35" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Style.Resources>
        </Style>

        <Style x:Key="ToggleButtonBlueRound" TargetType="ToggleButton">
            <Setter Property="Height" Value="22"/>
            <Setter Property="Width" Value="22"/>
            <Setter Property="Background">
                <Setter.Value>                    
                    <RadialGradientBrush GradientOrigin="0.5,1.0">
                        <RadialGradientBrush.RelativeTransform>
                            <TransformGroup>
                                <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.5" ScaleY="1.5"/>
                                <TranslateTransform X="0.2" Y="0.2"/>
                            </TransformGroup>
                        </RadialGradientBrush.RelativeTransform>
                        <GradientStop Color="#FF8A8A8A" Offset="0"/>
                        <GradientStop Color="#FF595959" Offset="0.15"/>
                        <GradientStop Color="#FF8A8A8A" Offset="0.20"/>
                        <GradientStop Color="#FF9B9B9B" Offset="0.70"/>
                        <GradientStop Color="#FFCCCCCC" Offset="0.85"/>
                        <GradientStop Color="#FFAAAAAA" Offset="1"/>
                    </RadialGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="#FF8F8F8F"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="#FF5D5D5D"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="10"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>                        
                    </ControlTemplate>
                </Setter.Value>
            </Setter>            
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <RadialGradientBrush GradientOrigin="0.5,0.0">
                                <RadialGradientBrush.RelativeTransform>
                                    <TransformGroup>
                                        <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.5" ScaleY="1.5"/>
                                        <TranslateTransform X="-0.2" Y="-0.2"/>
                                    </TransformGroup>
                                </RadialGradientBrush.RelativeTransform>
                                <GradientStop Color="#FFDADAFF" Offset="0"/>
                                <GradientStop Color="#FF5959FF" Offset="0.15"/>
                                <GradientStop Color="#FFA3A3FF" Offset="0.20"/>
                                <GradientStop Color="#FFDADAFF" Offset="0.70"/>
                                <GradientStop Color="White" Offset="0.85"/>
                                <GradientStop Color="#FF5F5FFF" Offset="1"/>
                            </RadialGradientBrush>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="BorderBrush" Value="Black"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="Foreground" Value="Black"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                <Border Background="{TemplateBinding Background}" CornerRadius="10"
                                        BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Effect">
                        <Setter.Value>
                            <DropShadowEffect Color="#FF0074FF" Opacity="1" BlurRadius="1" ShadowDepth="2" Direction="315"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="#FF9B9B9B"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="Foreground" Value="#FF777777"/>
                    <Setter Property="FontWeight" Value="Normal"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
            <Style.Resources>
                <Style TargetType="Image">
                    <Style.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.35" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Style.Resources>
        </Style>
        
        <Style x:Key="ToggleButtonBWRound" TargetType="ToggleButton" BasedOn="{StaticResource ToggleButtonBlueRound}">
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <RadialGradientBrush GradientOrigin="0.5,0.0">
                                <RadialGradientBrush.RelativeTransform>
                                    <TransformGroup>
                                        <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.5" ScaleY="1.5"/>
                                        <TranslateTransform X="-0.2" Y="-0.2"/>
                                    </TransformGroup>
                                </RadialGradientBrush.RelativeTransform>
                                <GradientStop Color="#FFDADADA" Offset="0"/>
                                <GradientStop Color="#FF595959" Offset="0.15"/>
                                <GradientStop Color="#FFDADADA" Offset="0.20"/>
                                <GradientStop Color="#FFCBCBCB" Offset="0.70"/>
                                <GradientStop Color="White" Offset="0.85"/>
                                <GradientStop Color="#FFAAAAAA" Offset="1"/>
                            </RadialGradientBrush>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="BorderBrush" Value="Black"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="Foreground" Value="Black"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                <Border Background="{TemplateBinding Background}" CornerRadius="10"
                                        BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Effect">
                        <Setter.Value>
                            <DropShadowEffect Color="White" Opacity="1" BlurRadius="1" ShadowDepth="2" Direction="315"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="CoordinateInput" TargetType="TextBox">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="bg" BorderBrush="Black" BorderThickness="1">
                            <ScrollViewer x:Name="PART_ContentHost" 
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                        Background="White"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="PART_ContentHost" Value="#FFFFE6B9"/>
                                <Setter Property="BorderBrush" TargetName="bg" Value="Orange"/>
                                <Setter Property="BorderThickness" TargetName="bg" Value="2"/>
                                <Setter Property="Padding" Value="2,-1,2,2"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" TargetName="PART_ContentHost" Value="LightGray"/>
                                <Setter Property="BorderBrush" TargetName="bg" Value="#FF8D8D8D"/>
                                <Setter Property="BorderThickness" TargetName="bg" Value="1"/>
                            </Trigger>
                            <EventTrigger RoutedEvent="Border.MouseDown" SourceName="PART_ContentHost">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="#FFFFC558" 
                                                         Duration="0:0:0.2"
                                                         Storyboard.TargetName="PART_ContentHost" 
                                                         Storyboard.TargetProperty="Background.Color"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="Border.GotFocus" SourceName="PART_ContentHost">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="#FFFFC558" 
                                                         Duration="0:0:0.2"
                                                         Storyboard.TargetName="PART_ContentHost" 
                                                         Storyboard.TargetProperty="Background.Color"/>
                                        <ColorAnimation To="Orange" 
                                                         Duration="0:0:0.2"
                                                         Storyboard.TargetName="bg" 
                                                         Storyboard.TargetProperty="BorderBrush.Color"/>
                                        <!--<ThicknessAnimation To="2" 
                                                         Duration="0:0:0.2"
                                                         Storyboard.TargetName="bg" 
                                                         Storyboard.TargetProperty="BorderThickness"/>-->
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="Border.LostFocus" SourceName="PART_ContentHost">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="#ffccff99" 
                                                         Duration="0:0:0.2"
                                                         Storyboard.TargetName="PART_ContentHost" 
                                                         Storyboard.TargetProperty="Background.Color"/>
                                        <ColorAnimation To="DarkGreen" 
                                                         Duration="0:0:0.2"
                                                         Storyboard.TargetName="bg" 
                                                         Storyboard.TargetProperty="BorderBrush.Color"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Top"/>
            <!--<Setter Property="Width" Value="45"/>-->
            <Setter Property="Height" Value="20"/>
            <Setter Property="TextAlignment" Value="Center"/>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="#FF8D8D8D"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="FontWeight" Value="Bold"/>
                </Trigger>
            </Style.Triggers>

        </Style>

        <Style x:Key="ValueInput" TargetType="TextBox">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="bg" BorderBrush="Blue" BorderThickness="1">
                            <ScrollViewer x:Name="PART_ContentHost" 
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                        Background="White"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="PART_ContentHost" Value="#FFDCCBBB"/>
                                <Setter Property="BorderBrush" TargetName="bg" Value="OrangeRed"/>
                                <Setter Property="BorderThickness" TargetName="bg" Value="2"/>
                                <Setter Property="Padding" Value="2,-1,2,2"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" TargetName="PART_ContentHost" Value="Gainsboro"/>
                                <Setter Property="BorderBrush" TargetName="bg" Value="Gainsboro"/>
                                <Setter Property="BorderThickness" TargetName="bg" Value="1"/>
                            </Trigger>
                            <EventTrigger RoutedEvent="Border.MouseDown" SourceName="PART_ContentHost">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="#FFDCCBBB" 
                                                         Duration="0:0:0.2"
                                                         Storyboard.TargetName="PART_ContentHost" 
                                                         Storyboard.TargetProperty="Background.Color"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="Border.GotFocus" SourceName="PART_ContentHost">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="#FFDCCBBB" 
                                                         Duration="0:0:0.2"
                                                         Storyboard.TargetName="PART_ContentHost" 
                                                         Storyboard.TargetProperty="Background.Color"/>
                                        <ColorAnimation To="Red" 
                                                         Duration="0:0:0.2"
                                                         Storyboard.TargetName="bg" 
                                                         Storyboard.TargetProperty="BorderBrush.Color"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="Border.LostFocus" SourceName="PART_ContentHost">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="#00BBBCCD" 
                                                         Duration="0:0:0.2"
                                                         Storyboard.TargetName="PART_ContentHost" 
                                                         Storyboard.TargetProperty="Background.Color"/>
                                        <ColorAnimation To="DarkBlue" 
                                                         Duration="0:0:0.2"
                                                         Storyboard.TargetName="bg" 
                                                         Storyboard.TargetProperty="BorderBrush.Color"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Top"/>
            <!--<Setter Property="Width" Value="45"/>-->
            <Setter Property="Height" Value="20"/>
            <Setter Property="TextAlignment" Value="Center"/>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="Blue"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="OrangeRed"/>
                    <Setter Property="FontWeight" Value="Bold"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Foreground" Value="Blue"/>
                    <Setter Property="FontWeight" Value="Normal"/>
                </Trigger>
            </Style.Triggers>

        </Style>
        
        <Style x:Key="CategoryLabel" TargetType="TextBlock">
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="#FF00044d"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="ToolTipImportant" TargetType="ToolTip" BasedOn="{StaticResource {x:Type ToolTip}}">
            <Setter Property="Foreground" Value="OrangeRed"/>
            <Setter Property="BorderBrush" Value="OrangeRed"/>
            <Setter Property="Background" Value="PaleGoldenrod"/>
        </Style>

        <!--Scrollbar Thumbs-->
        <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Grid x:Name="Grid">
                            <Rectangle x:Name="Rectangle0" RadiusX="5" RadiusY="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="7" Height="Auto" Fill="Transparent" Stroke="{TemplateBinding BorderBrush}"  StrokeThickness="1"/>
                            <Border x:Name="Rectangle1" CornerRadius="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="5" Height="Auto"  Background="{TemplateBinding Background}" Margin="0,1"/>
                            <Rectangle x:Name="MidLine0" HorizontalAlignment="Center" VerticalAlignment="Center" Width="3" Height="1" Stroke="{TemplateBinding BorderBrush}"  StrokeThickness="1"/>
                            <Rectangle x:Name="MidLine1" HorizontalAlignment="Center" VerticalAlignment="Center" Width="3" Height="1" Stroke="{TemplateBinding BorderBrush}"  StrokeThickness="1" Margin="0,5,0,0"/>
                            <Rectangle x:Name="MidLine2" HorizontalAlignment="Center" VerticalAlignment="Center" Width="3" Height="1" Stroke="{TemplateBinding BorderBrush}"  StrokeThickness="1" Margin="0,0,0,5"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Tag" Value="Horizontal">
                                <Setter TargetName="Rectangle0" Property="Width" Value="Auto" />
                                <Setter TargetName="Rectangle0" Property="Height" Value="7" />
                                <Setter TargetName="Rectangle1" Property="Width" Value="Auto" />
                                <Setter TargetName="Rectangle1" Property="Height" Value="5" />
                                <Setter TargetName="Rectangle1" Property="Margin" Value="1,0" />
                                <Setter TargetName="MidLine0" Property="Width" Value="1" />
                                <Setter TargetName="MidLine0" Property="Height" Value="3" />                                
                                <Setter TargetName="MidLine1" Property="Width" Value="1" />
                                <Setter TargetName="MidLine1" Property="Height" Value="3" />
                                <Setter TargetName="MidLine1" Property="Margin" Value="5,0,0,0" />
                                <Setter TargetName="MidLine2" Property="Width" Value="1" />
                                <Setter TargetName="MidLine2" Property="Height" Value="3" />
                                <Setter TargetName="MidLine2" Property="Margin" Value="0,0,5,0" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--ScrollBars-->
        <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
            <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
            <Setter Property="Foreground" Value="#8C8C8C" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Width" Value="9" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Grid x:Name="GridRoot" Width="9" Background="{TemplateBinding Background}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="0.00001*" />
                            </Grid.RowDefinitions>

                            <Track x:Name="PART_Track" Grid.Row="0" IsDirectionReversed="true" Focusable="false">
                                <Track.Thumb>
                                    <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" BorderBrush="Black" Style="{DynamicResource ScrollThumbs}" />
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="false" />
                                </Track.IncreaseRepeatButton>
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="false" />
                                </Track.DecreaseRepeatButton>
                            </Track>
                        </Grid>

                        <ControlTemplate.Triggers>
                            <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
                                <Setter TargetName="Thumb" Property="Background">
                                    <Setter.Value>
                                        <SolidColorBrush Color="#FF777777"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="Thumb" Property="BorderBrush">
                                    <Setter.Value>
                                        <SolidColorBrush Color="#FF000000"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                                <Setter TargetName="Thumb" Property="Background">
                                    <Setter.Value>
                                        <SolidColorBrush Color="#FF555577"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="Thumb" Property="BorderBrush">
                                    <Setter.Value>
                                        <SolidColorBrush Color="#FFFFFFFF"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>

                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                            </Trigger>
                            <Trigger Property="Orientation" Value="Horizontal">
                                <Setter TargetName="GridRoot" Property="LayoutTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90" />
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="PART_Track" Property="LayoutTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90" />
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Width" Value="Auto" />
                                <Setter Property="Height" Value="9" />
                                <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
                                <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                                <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <!-- Checkbox -->
        <Style x:Key="check_Box_Blue_White" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <BulletDecorator Background="Transparent">
                            <BulletDecorator.Bullet>
                                <Border x:Name="Border"  
                                          Width="15" 
                                          Height="15" 
                                          CornerRadius="7" 
                                          Background="#FFF"
                                          BorderThickness="2"
                                          BorderBrush="#000">
                                    <!--<Path 
                                        Width="9" Height="9" Margin="2,2,0,0"
                                        x:Name="CheckMark"
                                        SnapsToDevicePixels="False" 
                                        Stroke="#000"
                                        StrokeThickness="2"
                                        Data="M 0 3.5 L 3.5 7 M 3.5 7 L 7 0" />-->
                                    <Border x:Name="CheckMark"
                                            Width="9" Height="9"
                                            CornerRadius="4" 
                                            Background="#DDF"
                                            BorderBrush="#FFF"
                                            BorderThickness="2"/>
                                    <Border.Effect>
                                        <DropShadowEffect Color="#00F" BlurRadius="3" ShadowDepth="3" Opacity="1"/>
                                    </Border.Effect>
                                </Border>
                            </BulletDecorator.Bullet>
                            <ContentPresenter Margin="4,0,0,0"
            VerticalAlignment="Center"
            HorizontalAlignment="Left"
            RecognizesAccessKey="True"/>
                        </BulletDecorator>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="false">
                                <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                                <Setter TargetName="Border" Property="BorderThickness" Value="1"/>
                                <Setter TargetName="Border" Property="Effect">
                                    <Setter.Value>
                                        <DropShadowEffect Color="#00F" BlurRadius="3" ShadowDepth="3" Opacity="0"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                                <!--<Setter TargetName="CheckMark" Property="Data" Value="M 0 7 L 7 0" />-->
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="#99F" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="#00F" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="#FFF" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Border" Property="Background" Value="#CCC" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="#555" />
                                <Setter Property="Foreground" Value="#888"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- DataGrid -->
        <Style x:Key="BigTable_DataGridCell" TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
            <Setter Property="Background" Value="White"/>
            <Setter Property="BorderBrush" Value="Black"/>
            <Setter Property="IsEnabled" Value="False"/>
        </Style>

        <Style x:Key="BigTable_DataGridCell_Normal" TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="#FFFF4800"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <!-- Combobox Data Template w Checkboxes for selecting multiple entries-->
        <DataTemplate x:Key="SelectableEntry" DataType="{x:Type psu:SelectableString}">
            <StackPanel Orientation="Horizontal">
                <CheckBox IsChecked="{Binding IsSelected, Mode=TwoWay}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                <TextBlock Text="{Binding ObjectData, Mode=OneWay}" Margin="5,0,0,0" Padding="1" HorizontalAlignment="Left"/>
            </StackPanel>
        </DataTemplate>

        <DataTemplate x:Key="SelectableDictionaryEntry" DataType="{x:Type psmap:StructureMap}" >
            <StackPanel Orientation="Horizontal">
                <CheckBox IsChecked="{Binding Representation.IsSelected, Mode=TwoWay}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                <TextBlock Text="{Binding Key, Mode=OneWay}" Margin="5,0,0,0" Padding="1" HorizontalAlignment="Left" FontWeight="Bold"/>
                <TextBlock Text="{Binding Representation.ObjectData, Mode=OneWay}" Margin="5,0,0,0" Padding="1" HorizontalAlignment="Left"/>
            </StackPanel>
        </DataTemplate>

        <Style TargetType="{x:Type ComboBoxItem}">
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="VerticalContentAlignment" Value="Top" />
        </Style>
        
        <!-- GIT COMMITS -->
        <DataTemplate x:Key="CommitInList" DataType="{x:Type cduie:CommitInfo}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <!-- 0: key -->
                    <ColumnDefinition Width="60"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 2: author -->
                    <ColumnDefinition Width="120"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 4: timestamp -->
                    <ColumnDefinition Width="120"/>
                </Grid.ColumnDefinitions>
                
                <Rectangle Grid.Column="0" Grid.ColumnSpan="5" StrokeThickness="1" Stroke="Black"
                           Visibility="{Binding IsCurrent, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>

                <TextBlock Grid.Column="0" Text="{Binding Key, Mode=OneWay}" Foreground="DimGray" FontStyle="Italic"/>
                <TextBlock Grid.Column="2" FontWeight="Bold" Text="{Binding AuthorName, Mode=OneWay}"/>
                <TextBlock Grid.Column="4" Text="{Binding TimeStampAsStr, Mode=OneWay}"/>

            </Grid>
        </DataTemplate>
        
        <!-- PARAMETER NAME W DEFINITION ENTRIES -->
        <DataTemplate x:Key="PNameInList" DataType="{x:Type psp:ParameterReservedNameRecord}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <!-- 0: Name -->
                    <ColumnDefinition Width="80"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 2: Definition -->
                    <ColumnDefinition Width="500"/>
                </Grid.ColumnDefinitions>

                <Rectangle Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="{Binding PNamevisible, Mode=OneWay}"
                           Stroke="DimGray" StrokeThickness="1">
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{Binding PColor, Mode=OneWay}" Opacity="0.1"/>
                    </Rectangle.Fill>                    
                </Rectangle>
                <TextBlock Grid.Column="0" Text="{Binding Name, Mode=OneWay, StringFormat='{}&#34;{0}&#34;'}" FontWeight="Bold"
                           Visibility="{Binding PNamevisible, Mode=OneWay}">
                    <TextBlock.Foreground>
                        <SolidColorBrush Color="{Binding PColor, Mode=OneWay}"/>
                    </TextBlock.Foreground>
                    <TextBlock.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Copy to Clipboard" 
                                      Command="{Binding CopyToClipboradCmd, Mode=OneWay, Source={StaticResource GeneralCommands}}"
                                      CommandParameter="{Binding Name, Mode=OneWay}"/>
                        </ContextMenu>
                    </TextBlock.ContextMenu>
                </TextBlock>

                <TextBlock Grid.Column="2" Text="{Binding Definition, Mode=OneWay}">
                    <TextBlock.Foreground>
                        <SolidColorBrush Color="{Binding PColor, Mode=OneWay}"/>
                    </TextBlock.Foreground>
                </TextBlock>

            </Grid>
        </DataTemplate>
        
        <!-- LOG ENTRIES-->
        <DataTemplate x:Key="LogEntryInList" DataType="{x:Type ipc:LoggerEntry}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <!-- 0: Prefix -->
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 2: Symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 4: Text-->
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <TextBlock Grid.Column="0" Text="{Binding Prefix, Mode=OneWay}" FontFamily="Courier New" TextDecorations="Underline"/>
                
                <StackPanel Grid.Column="2" Orientation="Horizontal">
                    <Image Source="./Data/icons/cmd_info.png" Width="16" Height="16"
                           Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource LoggerEntryTypeVisibiltyConverterGroup}, ConverterParameter=INFO}"/>
                    <Image Source="./Data/icons/cmd_warning.png" Width="16" Height="16"
                           Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource LoggerEntryTypeVisibiltyConverterGroup}, ConverterParameter=WARNING}"/>
                    <Image Source="./Data/icons/cmd_error.png" Width="16" Height="16"
                           Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource LoggerEntryTypeVisibiltyConverterGroup}, ConverterParameter=ERROR}"/>
                    <Image Source="./Data/icons/cmd_comm_unit.png" Width="16" Height="16"
                           Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource LoggerEntryTypeVisibiltyConverterGroup}, ConverterParameter=COMM}"/>
                    <Image Source="./Data/icons/cmd_server.png" Width="16" Height="16"
                           Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource LoggerEntryTypeVisibiltyConverterGroup}, ConverterParameter=SERVER}"/>
                    <Image Source="./Data/icons/cmd_client.png" Width="16" Height="16"
                           Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource LoggerEntryTypeVisibiltyConverterGroup}, ConverterParameter=CLIENT}"/>
                </StackPanel>

                <TextBlock Grid.Column="4" Text="{Binding Text, Mode=OneWay}" FontFamily="Courier New">
                    <TextBlock.Foreground>
                        <SolidColorBrush Color="{Binding Type, Mode=OneWay, Converter={StaticResource LoggerEntryTypeToWColorConverter}}"/>
                    </TextBlock.Foreground>
                </TextBlock>
                
            </Grid>
        </DataTemplate>
        
        <!-- TYPE SPECIFIC: MultiValue -->
        <DataTemplate x:Key="MValueInList" DataType="{x:Type psmv:MultiValue}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <!-- 0: ID -->
                    <ColumnDefinition Width="36"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 2: TYPE symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 4: Name -->
                    <ColumnDefinition Width="200"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 6: Units -->
                    <ColumnDefinition Width="150"/>
                    <ColumnDefinition Width="8"/>
                    <!-- 8: Pointer Symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 10: Pointer Info -->
                    <ColumnDefinition Width="200"/>
                    
                </Grid.ColumnDefinitions>

                <TextBlock Grid.Row="0" Text="{Binding MVID, Mode=OneWay}" FontWeight="Normal" Foreground="DimGray" FontStyle="Italic" TextAlignment="Right"/>

                <StackPanel Grid.Column="2" Orientation="Horizontal">
                    <Image Source="./Data/icons/xcomp_switch_field.png" Width="16" Height="16"
                           Visibility="{Binding Mode=OneWay, Converter={StaticResource ParameterTypeToVisibilityConverterGroup}, ConverterParameter=ParameterStructure.Values.MultiValueTable1D+ParameterStructure.Values.MultiValueTable2D+ParameterStructure.Values.MultiValueTable3D}"/>
                    <Image Source="./Data/icons/xcomp_switch_funct.png" Width="16" Height="16"
                           Visibility="{Binding Mode=OneWay, Converter={StaticResource ParameterTypeToVisibilityConverterGroup}, ConverterParameter=ParameterStructure.Values.MultiValueFunctionND}"/>
                    <Image Source="./Data/icons/xcomp_switch_table.png" Width="16" Height="16"
                           Visibility="{Binding Mode=OneWay, Converter={StaticResource ParameterTypeToVisibilityConverterGroup}, ConverterParameter=ParameterStructure.Values.MultiValueBigTable}"/>
                </StackPanel>

                <TextBlock Grid.Column="4" Text="{Binding MVName, Mode=OneWay}" FontWeight="Bold"/>

                <TextBlock Grid.Column="6" Text="{Binding MVUnitsAsString, Mode=OneWay}"/>

                <Image Grid.Column="8"  Source="./Data/icons/xcomp_switch_FN_pos.png" Width="16" Height="16"/>
                
                <TextBlock Grid.Column="10" Text="{Binding MVDisplayVectorAsString, Mode=OneWay}" FontWeight="Normal"/>

            </Grid>
        </DataTemplate>
        
        <!-- TYPE SPECIFIC: ImageRecord -->
        <DataTemplate x:Key="ImageRecordInList" DataType="{x:Type cbwpfu:ImageRecord}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <!-- 0: id -->
                    <ColumnDefinition Width="20"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 2: name -->
                    <ColumnDefinition Width="120"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 4: image-->
                    <ColumnDefinition Width="24"/>
                </Grid.ColumnDefinitions>

                <TextBlock Grid.Column="0" Text="{Binding ID, Mode=OneWay}" FontWeight="Bold"/>
                <TextBlock Grid.Column="2" Text="{Binding Name, Mode=OneWay, StringFormat='{}&#34;{0}&#34;'}"/>
                <Image Grid.Column="4" Source="{Binding Symbol, Mode=OneWay}" Width="24" Height="24"/>
                
            </Grid>
        </DataTemplate>

        <!-- TYPE SPECIFIC: Parameter -->
        <DataTemplate x:Key="ParamInList" DataType="{x:Type psp:Parameter}">
            <DataTemplate.Resources>
                <SolidColorBrush x:Key="OwnerSelectedBrush" Color="#330000ff"/>
            </DataTemplate.Resources>
            <Grid>
                <Grid.ColumnDefinitions>
                    <!-- 0: ID, Selection Lines -->
                    <ColumnDefinition Width="35"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 2: Name -->
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 4: Unit -->
                    <ColumnDefinition Width="60"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 6: ValueCurrent -->
                    <ColumnDefinition Width="90"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 8: Propagation -->
                    <ColumnDefinition Width="23"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 10: ValueField Type -->
                    <ColumnDefinition Width="23"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 12: Category -->
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 14: Text Value -->
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 16: TimeStamp (optional) -->
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <Rectangle Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Stretch"
                           Width="1" Fill="DimGray" Visibility="{Binding OwnerIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                <Rectangle Grid.Column="0" Grid.ColumnSpan="16" Fill="{StaticResource OwnerSelectedBrush}" Visibility="{Binding OwnerIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                
                <TextBlock Grid.Column="0" Text="{Binding ID, Mode=OneWay}" TextAlignment="Right" FontWeight="Normal" Foreground="DimGray" FontStyle="Italic"/>
                <TextBlock Grid.Column="2" Grid.ColumnSpan="2" Text="{Binding Name, Mode=OneWay}" FontWeight="Bold">
                    <TextBlock.Foreground>
                        <SolidColorBrush Color="{Binding Propagation, Mode=OneWay, Converter={StaticResource InfoFlowToMultiWMColorConverter}}"/>
                    </TextBlock.Foreground>
                </TextBlock>
                <TextBlock Grid.Column="4" Grid.ColumnSpan="2" Text="{Binding Unit, Mode=OneWay, StringFormat={}({0})}">
                    <TextBlock.Foreground>
                        <SolidColorBrush Color="{Binding Propagation, Mode=OneWay, Converter={StaticResource InfoFlowToMultiWMColorConverter}}"/>
                    </TextBlock.Foreground>
                </TextBlock>

                <Rectangle Grid.Column="6" StrokeThickness="2" RadiusX="2" RadiusY="2">
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{Binding TimeStamp, Mode=OneWay, Converter={StaticResource DateTimeToWinMediaColorConverter}}"/>
                    </Rectangle.Fill>
                    <Rectangle.Stroke>
                        <SolidColorBrush Color="{Binding IsWithinBounds, Mode=OneWay, Converter={StaticResource BoolToWinMediaColorConverter}}"/>
                    </Rectangle.Stroke>
                </Rectangle>
                <TextBlock Grid.Column="6" HorizontalAlignment="Right" FontWeight="Bold" Padding="0,0,2,0"
                           Text="{Binding ValueCurrent, Mode=OneWay, Converter={StaticResource DoubleToStringConverter}}"/>

                <Rectangle Grid.Column="8" StrokeThickness="1" Stroke="Black" RadiusX="5" RadiusY="5" Fill="#AAFFFFFF"/>
                <TextBlock Grid.Column="8" HorizontalAlignment="Center"
                           Text="{Binding Propagation, Mode=OneWay, Converter={StaticResource InfoFlowToLetterConverter}}" 
                           FontFamily="/ComponentBuilder;component/Data/fonts/#categories" FontSize="18"/>

                <Rectangle Grid.Column="10" StrokeThickness="1" Stroke="Black" RadiusX="5" RadiusY="5" Fill="#88EBEBFF"/>
                <TextBlock Grid.Column="10" HorizontalAlignment="Center"
                           Text="{Binding ValueField, Mode=OneWay, Converter={StaticResource MultiValueToStringConverter}}" 
                           FontFamily="/ComponentBuilder;component/Data/fonts/#categories" FontSize="18"/>

                <Rectangle Grid.Column="12" StrokeThickness="1" Stroke="Black" RadiusX="5" RadiusY="5" Fill="#88FFFFFF"/>
                <TextBlock Grid.Column="12"
                           Text="{Binding Category, Mode=OneWay, Converter={StaticResource CategoryToSparseStringConverter}}" 
                           FontFamily="/ComponentBuilder;component/Data/fonts/#categories" FontSize="18"/>

                <TextBlock Grid.Column="14" Grid.ColumnSpan="2" Text="{Binding TextValue, Mode=OneWay, StringFormat={}\'{0}\'}" FontStyle="Italic"/>
                
                <!--<Rectangle Grid.Column="16" StrokeThickness="1" RadiusX="2" RadiusY="2">
                    <Rectangle.Stroke>
                        <SolidColorBrush Color="{Binding TimeStamp, Mode=OneWay, Converter={StaticResource DateTimeToWinMediaColorConverter}}"/>
                    </Rectangle.Stroke>
                </Rectangle>
                           
                <TextBlock Grid.Column="16" HorizontalAlignment="Center"
                           Text="{Binding TimeStamp, Mode=OneWay, StringFormat=g, ConverterCulture=de-DE}">
                    <TextBlock.Foreground>
                        <SolidColorBrush Color="{Binding TimeStamp, Mode=OneWay, Converter={StaticResource DateTimeToWinMediaColorConverter}}"/>
                    </TextBlock.Foreground>
                </TextBlock>-->

                <!-- highlighting during comparison -->
                <Rectangle Grid.Column="0" Grid.ColumnSpan="16" >
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{Binding CompResult, Mode=OneWay, Converter={StaticResource CompResultToMultiWMColorConverter}}"/>
                    </Rectangle.Fill>
                </Rectangle>
                <Rectangle Grid.Column="0" Grid.ColumnSpan="16" Stroke="Black" StrokeThickness="2" Visibility="{Binding IsHLByBuddy, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>


            </Grid>
        </DataTemplate>
        
        <DataTemplate x:Key="ParamInListMapping" DataType="{x:Type psp:Parameter}">
            <DataTemplate.Resources>
                <SolidColorBrush x:Key="OwnerSelectedBrush" Color="#33000000"/>
            </DataTemplate.Resources>
            <Grid>
                <Grid.ColumnDefinitions>
                    <!-- 0: ID, Selection Lines -->
                    <ColumnDefinition Width="35"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 2: Name -->
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 4: Unit -->
                    <ColumnDefinition Width="60"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 6: ValueCurrent -->
                    <ColumnDefinition Width="90"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 8: Propagation -->
                    <ColumnDefinition Width="23"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 10: ValueField Type -->
                    <ColumnDefinition Width="23"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 12: Category -->
                    <ColumnDefinition MinWidth="{Binding Converter={StaticResource TreeDepthToLengthConverter}, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 14: Text Value -->
                    <ColumnDefinition Width="129"/>
                </Grid.ColumnDefinitions>

                <Rectangle Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Stretch"
                           Width="1" Fill="DimGray" Visibility="{Binding OwnerIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                <Rectangle Grid.Column="0" Grid.ColumnSpan="15" Fill="{StaticResource OwnerSelectedBrush}" Visibility="{Binding OwnerIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>

                <TextBlock Grid.Column="0" Text="{Binding ID, Mode=OneWay}" TextAlignment="Right" FontWeight="Normal" Foreground="DimGray" FontStyle="Italic"/>
                <TextBlock Grid.Column="2" Grid.ColumnSpan="2" Text="{Binding Name, Mode=OneWay}" FontWeight="Bold">
                    <TextBlock.Foreground>
                        <SolidColorBrush Color="{Binding Propagation, Mode=OneWay, Converter={StaticResource InfoFlowToMultiWMColorConverter}}"/>
                    </TextBlock.Foreground>
                </TextBlock>
                <TextBlock Grid.Column="4" Grid.ColumnSpan="2" Text="{Binding Unit, Mode=OneWay, StringFormat={}({0})}">
                    <TextBlock.Foreground>
                        <SolidColorBrush Color="{Binding Propagation, Mode=OneWay, Converter={StaticResource InfoFlowToMultiWMColorConverter}}"/>
                    </TextBlock.Foreground>
                </TextBlock>

                <Rectangle Grid.Column="6" StrokeThickness="2" RadiusX="2" RadiusY="2">
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{Binding TimeStamp, Mode=OneWay, Converter={StaticResource DateTimeToWinMediaColorConverter}}"/>
                    </Rectangle.Fill>
                    <Rectangle.Stroke>
                        <SolidColorBrush Color="{Binding IsWithinBounds, Mode=OneWay, Converter={StaticResource BoolToWinMediaColorConverter}}"/>
                    </Rectangle.Stroke>
                </Rectangle>
                <TextBlock Grid.Column="6" HorizontalAlignment="Right" FontWeight="Bold" Padding="0,0,2,0"
                           Text="{Binding ValueCurrent, Mode=OneWay, Converter={StaticResource DoubleToStringConverter}}"/>

                <Rectangle Grid.Column="8" StrokeThickness="1" Stroke="Black" RadiusX="5" RadiusY="5" Fill="#AAFFFFFF"/>
                <TextBlock Grid.Column="8" HorizontalAlignment="Center"
                           Text="{Binding Propagation, Mode=OneWay, Converter={StaticResource InfoFlowToLetterConverter}}" 
                           FontFamily="/ComponentBuilder;component/Data/fonts/#categories" FontSize="18"/>

                <Rectangle Grid.Column="10" StrokeThickness="1" Stroke="Black" RadiusX="5" RadiusY="5" Fill="#88EBEBFF"/>
                <TextBlock Grid.Column="10" HorizontalAlignment="Center"
                           Text="{Binding ValueField, Mode=OneWay, Converter={StaticResource MultiValueToStringConverter}}" 
                           FontFamily="/ComponentBuilder;component/Data/fonts/#categories" FontSize="18"/>

                <Rectangle Grid.Column="12" StrokeThickness="1" Stroke="Black" RadiusX="5" RadiusY="5" Fill="#88FFFFFF" HorizontalAlignment="Left"
                           Width="{Binding ElementName=tb_cat, Path=ActualWidth, Mode=OneWay}"/>
                <TextBlock Grid.Column="12" x:Name="tb_cat"
                           Text="{Binding Category, Mode=OneWay, Converter={StaticResource CategoryToSparseStringConverter}}" 
                           FontFamily="/ComponentBuilder;component/Data/fonts/#categories" FontSize="18"
                           HorizontalAlignment="Left" Width="Auto"/>

                <TextBlock Grid.Column="14" Grid.ColumnSpan="2" Text="{Binding TextValue, Mode=OneWay, StringFormat={}\'{0}\'}" FontStyle="Italic"/>

            </Grid>
        </DataTemplate>
        
        <DataTemplate x:Key="CalcInList" DataType="{x:Type psp:Calculation}">
            <DataTemplate.Resources>
                <SolidColorBrush x:Key="OwnerSelectedBrush" Color="#330000ff"/>
            </DataTemplate.Resources>
            <Grid MinHeight="21">
                <Grid.ColumnDefinitions>
                    <!-- 0: ID, selection lines -->
                    <ColumnDefinition Width="35"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 2: Name -->
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 4: Expression -->
                    <ColumnDefinition Width="300"/>
                </Grid.ColumnDefinitions>

                <Rectangle Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Stretch"
                           Width="1" Fill="DimGray" Visibility="{Binding OwnerIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                <Rectangle Grid.Column="0" Grid.ColumnSpan="16" Fill="{StaticResource OwnerSelectedBrush}" Visibility="{Binding OwnerIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                
                <TextBlock Grid.Column="0" Text="{Binding ID, Mode=OneWay}" TextAlignment="Right" FontWeight="Bold" Foreground="DimGray" FontStyle="Italic"/>
                <TextBlock Grid.Column="2" Text="{Binding Name, Mode=OneWay}" FontWeight="Bold">
                    <TextBlock.Foreground>
                        <SolidColorBrush Color="{Binding UpToDate, Mode=OneWay, Converter={StaticResource BoolToWinMediaColorConverter}}"/>
                    </TextBlock.Foreground>
                </TextBlock>

                <Rectangle Grid.Column="4" StrokeThickness="2" RadiusX="2" RadiusY="2">
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{Binding UpToDate, Mode=OneWay, Converter={StaticResource BoolToWinMediaColorConverter}}" Opacity="0.25"/>
                    </Rectangle.Fill>
                    <Rectangle.Stroke>
                        <SolidColorBrush Color="{Binding UpToDate, Mode=OneWay, Converter={StaticResource BoolToWinMediaColorConverter}}"/>
                    </Rectangle.Stroke>
                </Rectangle>
                <TextBlock Grid.Column="4" Text="{Binding ExpressionExtended, Mode=OneWay}" HorizontalAlignment="Left" Padding="5,1,1,1"/>

                <!-- highlighting during comparison -->
                <Rectangle Grid.Column="0" Grid.ColumnSpan="5">
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{Binding CompResult, Mode=OneWay, Converter={StaticResource CompResultToMultiWMColorConverter}}"/>
                    </Rectangle.Fill>
                    <Rectangle.ToolTip>
                        <ToolTip Content="{Binding ExpressionExtended, Mode=OneWay}" Style="{StaticResource ToolTipImportant}"/>
                    </Rectangle.ToolTip>
                </Rectangle>
                <Rectangle Grid.Column="0" Grid.ColumnSpan="5" Stroke="Black" StrokeThickness="2" Visibility="{Binding IsHLByBuddy, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>

            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="CalcInListMapping" DataType="{x:Type psp:Calculation}">
            <DataTemplate.Resources>
                <SolidColorBrush x:Key="OwnerSelectedBrush" Color="#33000000"/>
            </DataTemplate.Resources>
            <Grid MinHeight="21">
                <Grid.ColumnDefinitions>
                    <!-- 0: ID, selection lines -->
                    <ColumnDefinition Width="35"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 2: Name -->
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 4: Expression -->
                    <ColumnDefinition MinWidth="{Binding Converter={StaticResource TreeDepthToLengthConverter}, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}"/>
                    <ColumnDefinition Width="335"/>
                </Grid.ColumnDefinitions>

                <Rectangle Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Stretch"
                           Width="1" Fill="DimGray" Visibility="{Binding OwnerIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                <Rectangle Grid.Column="0" Grid.ColumnSpan="6" Fill="{StaticResource OwnerSelectedBrush}" Visibility="{Binding OwnerIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>

                <TextBlock Grid.Column="0" Text="{Binding ID, Mode=OneWay}" TextAlignment="Right" FontWeight="Bold" Foreground="DimGray" FontStyle="Italic"/>
                <TextBlock Grid.Column="2" Text="{Binding Name, Mode=OneWay}" FontWeight="Bold">
                    <TextBlock.Foreground>
                        <SolidColorBrush Color="{Binding UpToDate, Mode=OneWay, Converter={StaticResource BoolToWinMediaColorConverter}}"/>
                    </TextBlock.Foreground>
                </TextBlock>

                <Rectangle Grid.Column="4" Grid.ColumnSpan="2" StrokeThickness="2" RadiusX="2" RadiusY="2" HorizontalAlignment="Stretch">
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{Binding UpToDate, Mode=OneWay, Converter={StaticResource BoolToWinMediaColorConverter}}" Opacity="0.25"/>
                    </Rectangle.Fill>
                    <Rectangle.Stroke>
                        <SolidColorBrush Color="{Binding UpToDate, Mode=OneWay, Converter={StaticResource BoolToWinMediaColorConverter}}"/>
                    </Rectangle.Stroke>
                </Rectangle>
                <TextBlock Grid.Column="4" Grid.ColumnSpan="2" Text="{Binding ExpressionExtended, Mode=OneWay}" HorizontalAlignment="Left" Padding="5,1,1,1"/>

            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="ParamShortInList" DataType="{x:Type psp:Parameter}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="4"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <TextBlock Grid.Column="0" Text="{Binding Name, Mode=OneWay}" FontWeight="Bold"/>
                <TextBlock Grid.Column="2" Text="{Binding Unit, Mode=OneWay, StringFormat={}({0})}"/>
            </Grid>
        </DataTemplate>
        
        <DataTemplate x:Key="ParamOfCompInList" DataType="{x:Type psp:Parameter}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <!-- 0: ID, Selection Lines -->
                    <ColumnDefinition Width="35"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 2: Name -->
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 4: Unit -->
                    <ColumnDefinition Width="60"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 6: ValueCurrent -->
                    <ColumnDefinition Width="90"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 8: Propagation -->
                    <ColumnDefinition Width="23"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 10: ValueField Type -->
                    <ColumnDefinition Width="23"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 12: Category -->
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 14: Text Value -->
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="2"/>
                    <!-- 16: TimeStamp (optional) -->
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <Rectangle Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Stretch"
                           Width="1" Fill="DimGray" Visibility="{Binding OwnerIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                <Rectangle Grid.Column="0" Grid.ColumnSpan="17" Fill="#330000ff" Visibility="{Binding OwnerIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>

                <TextBlock Grid.Column="0" Text="{Binding ID, Mode=OneWay}" TextAlignment="Right" FontWeight="Normal" Foreground="DimGray" FontStyle="Italic"/>
                <TextBlock Grid.Column="2" Grid.ColumnSpan="2" Text="{Binding Name, Mode=OneWay}" FontWeight="Bold">
                    <TextBlock.Foreground>
                        <SolidColorBrush Color="{Binding Propagation, Mode=OneWay, Converter={StaticResource InfoFlowToMultiWMColorConverter}}"/>
                    </TextBlock.Foreground>
                </TextBlock>
                <TextBlock Grid.Column="4" Grid.ColumnSpan="2" Text="{Binding Unit, Mode=OneWay, StringFormat={}({0})}">
                    <TextBlock.Foreground>
                        <SolidColorBrush Color="{Binding Propagation, Mode=OneWay, Converter={StaticResource InfoFlowToMultiWMColorConverter}}"/>
                    </TextBlock.Foreground>
                </TextBlock>

                <Rectangle Grid.Column="6" StrokeThickness="2" RadiusX="2" RadiusY="2">
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{Binding TimeStamp, Mode=OneWay, Converter={StaticResource DateTimeToWinMediaColorConverter}}"/>
                    </Rectangle.Fill>
                    <Rectangle.Stroke>
                        <SolidColorBrush Color="{Binding IsWithinBounds, Mode=OneWay, Converter={StaticResource BoolToWinMediaColorConverter}}"/>
                    </Rectangle.Stroke>
                </Rectangle>
                <TextBlock Grid.Column="6" HorizontalAlignment="Right" FontWeight="Bold" Padding="0,0,2,0"
                           Text="{Binding ValueCurrent, Mode=OneWay, Converter={StaticResource DoubleToStringConverter}}"/>

                <Rectangle Grid.Column="8" StrokeThickness="1" Stroke="Black" RadiusX="5" RadiusY="5" Fill="#AAFFFFFF"/>
                <TextBlock Grid.Column="8" HorizontalAlignment="Center"
                           Text="{Binding Propagation, Mode=OneWay, Converter={StaticResource InfoFlowToLetterConverter}}" 
                           FontFamily="/ComponentBuilder;component/Data/fonts/#categories" FontSize="18"/>

                <Rectangle Grid.Column="10" StrokeThickness="1" Stroke="Black" RadiusX="5" RadiusY="5" Fill="#88EBEBFF"/>
                <TextBlock Grid.Column="10" HorizontalAlignment="Center"
                           Text="{Binding ValueField, Mode=OneWay, Converter={StaticResource MultiValueToStringConverter}}" 
                           FontFamily="/ComponentBuilder;component/Data/fonts/#categories" FontSize="18"/>

                <Rectangle Grid.Column="12" StrokeThickness="1" Stroke="Black" RadiusX="5" RadiusY="5" Fill="#88FFFFFF"/>
                <TextBlock Grid.Column="12"
                           Text="{Binding Category, Mode=OneWay, Converter={StaticResource CategoryToSparseStringConverter}}" 
                           FontFamily="/ComponentBuilder;component/Data/fonts/#categories" FontSize="18"/>

                <TextBlock Grid.Column="14" Grid.ColumnSpan="2" Text="{Binding TextValue, Mode=OneWay, StringFormat={}\'{0}\'}" FontStyle="Italic"/>

                <!-- display in the instances of the component -->
                <StackPanel Grid.Column="16" Orientation="Horizontal">
                    <Image Source="./Data/icons/a_switch_onOFF.png" Width="16" Height="16"
                           Visibility="{Binding ShowInCompInstDisplay, Mode=OneWay, Converter={StaticResource ReverseBoolToVisConverterGroup}}"
                           ToolTip="bei der Verortung nicht anzeigen"/>
                    <Image Source="./Data/icons/a_switch_onON.png" Width="16" Height="16"
                           Visibility="{Binding ShowInCompInstDisplay, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"
                           ToolTip="bei der Verortung anzeigen"/>
                    <StackPanel.InputBindings>
                        <MouseBinding Gesture="LeftClick" Command="{Binding ToggleShowInCompInstDisplay, Mode=OneWay}"/>
                    </StackPanel.InputBindings>
                </StackPanel>

            </Grid>
        </DataTemplate>
        
        <!-- TYPE SPECIFIC: Component -->
        <HierarchicalDataTemplate x:Key="ComponentInList" DataType="{x:Type pscomp:Component}" ItemsSource="{Binding Children, Mode=OneWay}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <!-- 0: selection lines -->
                    <ColumnDefinition Width="2"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 2: slot symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 4: locked / unlocked symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 6: state symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 8: slot name -->
                    <ColumnDefinition Width="150"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 10: Alignment Column -->
                    <ColumnDefinition Width="Auto" MinWidth="{Binding Converter={StaticResource TreeDepthToLengthConverter}, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}"/>
                    <!-- 11: Name -->
                    <ColumnDefinition Width="110"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 13: Description -->
                    <ColumnDefinition Width="120"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 15: Geometry Indicator -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 17: Symbol -->
                    <ColumnDefinition Width="24"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 19: Checkbox for marking -->
                    <ColumnDefinition Width="20"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 21: Switch ON / OFF -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>                   
                </Grid.ColumnDefinitions>

                <!-- highlight for the component slot (differentiates components from parameters and calculations) -->
                <Rectangle Grid.Column="0" Grid.ColumnSpan="16" Stroke="DimGray" StrokeThickness="1"/>
                <Rectangle Grid.Column="0" Grid.ColumnSpan="16" Fill="#330000ff" Visibility="{Binding ParentIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                
                <Rectangle Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Stretch"
                           Width="2" Fill="DimGray" Visibility="{Binding ParentIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                <Rectangle Grid.Column="0" Grid.ColumnSpan="4" VerticalAlignment="Bottom" HorizontalAlignment="Left" 
                           Width="20" Height="2" Fill="DimGray" Visibility="{Binding ParentIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>


                <StackPanel Grid.Column="2" Orientation="Horizontal" Visibility="{Binding IsBoundInNW, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}">
                    <Image Source="./Data/icons/xcomp_switch_Comp_COPY_inNWS.png" Width="16" Height="16"
                           Visibility="{Binding IsBoundInSelNW, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                    <Image Source="./Data/icons/xcomp_switch_Comp_COPY_inNW.png" Width="16" Height="16"
                           Visibility="{Binding IsBoundInSelNW, Mode=OneWay, Converter={StaticResource ReverseBoolToVisConverterGroup}}"/>
                </StackPanel>
                <StackPanel Grid.Column="2" Orientation="Horizontal" Visibility="{Binding IsBoundInNW, Mode=OneWay, Converter={StaticResource ReverseBoolToVisConverterGroup}}">
                    <Image Source="./Data/icons/xcomp_switch_Comp_COPY.png" Width="16" Height="16"/>
                </StackPanel>
                
                <StackPanel Grid.Column="4" Orientation="Horizontal">
                    <Image Source="./Data/icons/xcomp_switch_locked.png" Width="16" Height="16"
                           Visibility="{Binding IsLocked, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                    <Image Source="./Data/icons/xcomp_switch_unlocked.png" Width="16" Height="16"
                           Visibility="{Binding IsLocked, Mode=OneWay, Converter={StaticResource ReverseBoolToVisConverterGroup}}"/>
                </StackPanel>
                
                <Ellipse Grid.Column="6" Height="16" Width="16" Stroke="Black" Fill="White" HorizontalAlignment="Left"/>
                <Ellipse Grid.Column="6" Height="10" Width="10" HorizontalAlignment="Left" Margin="3,0,2,0" Stroke="Black">
                    <Ellipse.Fill>
                        <RadialGradientBrush>
                            <GradientStop Color="White" Offset="0"/>
                            <GradientStop Color="White" Offset="0.1"/>
                            <GradientStop Color="{Binding AccessLocal.ProfileState, Mode=OneWay, Converter={StaticResource ComponentValidityToColorConverter}}" Offset="1"/>
                        </RadialGradientBrush>
                    </Ellipse.Fill>
                </Ellipse>

                <Rectangle Grid.Column="8" StrokeThickness="1" 
                           RadiusX="{Binding IsAutomaticallyGenerated, Mode=OneWay, Converter={StaticResource BooleanToRadiusSizeConverter}}" 
                           RadiusY="{Binding IsAutomaticallyGenerated, Mode=OneWay, Converter={StaticResource BooleanToRadiusSizeConverter}}">
                    <Rectangle.Stroke>
                        <SolidColorBrush Color="{Binding HasAllParamsWithinLimits, Mode=OneWay, Converter={StaticResource BoolToWinMediaColorConverter}}"/>
                    </Rectangle.Stroke>
                    <Rectangle.Fill>
                        <LinearGradientBrush StartPoint="0,0.5" EndPoint="0.25,0.5">
                            <GradientStop Color="{Binding HasAllParamsWithinLimits, Mode=OneWay, Converter={StaticResource BoolToWinMediaColorWOpacityConverter1}}" Offset="0"/>
                            <GradientStop Color="#aaffffff" Offset="1"/>
                        </LinearGradientBrush>
                    </Rectangle.Fill>
                </Rectangle>
                <TextBlock Grid.Column="8" Text="{Binding CurrentSlot, Mode=OneWay}" Foreground="Black" FontWeight="Bold" Padding="2,3,2,1"
                           Visibility="{Binding HideDetails, Mode=OneWay, Converter={StaticResource ReverseBoolToVisConverterGroup}}"/>
                <TextBlock Grid.Column="8" Text="{Binding CurrentSlot, Mode=OneWay}" Foreground="Gray" FontWeight="Normal" Padding="2,3,2,1"
                           Visibility="{Binding HideDetails, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>

                <!--ID: to remove -->
                <StackPanel Grid.Column="11" Orientation="Horizontal">
                    <TextBlock Width="26" Text="{Binding ID, Mode=OneWay}" TextAlignment="Right" Foreground="DimGray" FontStyle="Italic"/>
                    <TextBlock Width="80" Text="{Binding Name, Mode=OneWay}" Margin="4,0,0,0"/>
                </StackPanel>
                
                <TextBlock Grid.Column="13" Width="120" Text="{Binding Description, Mode=OneWay}"/>

                <StackPanel Grid.Column="15" Orientation="Horizontal"
                            ToolTip="{Binding R2GMainState, Mode=OneWay, Converter={StaticResource Relation2GeomTypeToStringConverter}}">
                    <Image Source="./Data/icons/xcomp_switch_Comp_GNone.png" Width="16" Height="16"
                           Visibility="{Binding R2GMainState, Mode=OneWay, Converter={StaticResource Relation2GeomTypeToVisibiltyConverterGroup}, ConverterParameter=NONE}"/>
                    <Image Source="./Data/icons/xcomp_switch_Comp_GInSub.png" Width="16" Height="16"
                           Visibility="{Binding R2GMainState, Mode=OneWay, Converter={StaticResource Relation2GeomTypeToVisibiltyConverterGroup}, ConverterParameter=DESCRIBES}"/>
                    <Image Source="./Data/icons/xcomp_switch_Comp_GDescribes.png" Width="16" Height="16"
                           Visibility="{Binding R2GMainState, Mode=OneWay, Converter={StaticResource Relation2GeomTypeToVisibiltyConverterGroup}, ConverterParameter=DESCRIBES_3D}"/>
                    <Image Source="./Data/icons/xcomp_switch_Comp_GDescribesE.png" Width="16" Height="16"
                           Visibility="{Binding R2GMainState, Mode=OneWay, Converter={StaticResource Relation2GeomTypeToVisibiltyConverterGroup}, ConverterParameter=DESCRIBES_2DorLESS}"/>
                    <Image Source="./Data/icons/xcomp_switch_Comp_GAligned.png" Width="16" Height="16"
                           Visibility="{Binding R2GMainState, Mode=OneWay, Converter={StaticResource Relation2GeomTypeToVisibiltyConverterGroup}, ConverterParameter=ALIGNED_WITH}"/>
                    <Image Source="./Data/icons/xcomp_switch_Comp_GContained.png" Width="16" Height="16"
                           Visibility="{Binding R2GMainState, Mode=OneWay, Converter={StaticResource Relation2GeomTypeToVisibiltyConverterGroup}, ConverterParameter=CONTAINED_IN}"/>
                    <Image Source="./Data/icons/xcomp_switch_Comp_GConnects.png" Width="16" Height="16"
                           Visibility="{Binding R2GMainState, Mode=OneWay, Converter={StaticResource Relation2GeomTypeToVisibiltyConverterGroup}, ConverterParameter=CONNECTS}"/>
                    <Image Source="./Data/icons/xcomp_switch_Comp_GGrouped.png" Width="16" Height="16"
                           Visibility="{Binding R2GMainState, Mode=OneWay, Converter={StaticResource Relation2GeomTypeToVisibiltyConverterGroup}, ConverterParameter=GROUPS}"/>
                    <StackPanel.InputBindings>
                        <MouseBinding Gesture="LeftClick" Command="{Binding RotateR2GMainState, Mode=OneWay}"/>
                    </StackPanel.InputBindings>
                    <StackPanel.Effect>
                        <DropShadowEffect Color="Blue" BlurRadius="3" ShadowDepth="3" Opacity="{Binding R2GMainState.IsRealized, Mode=OneWay, Converter={StaticResource BoolToOpacityConverter}}"/>
                    </StackPanel.Effect>
                </StackPanel>

                <Image Grid.Column="17" Source="{Binding SymbolImage, Mode=OneWay}" Width="24" Height="24"/>

                <CheckBox Grid.Column="19" IsChecked="{Binding IsMarked, Mode=TwoWay}" Visibility="{Binding IsMarkable, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>

                <!-- Visibility="{Binding IsMarkable, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}" removed 21.08.2017 -->
                <StackPanel Grid.Column="21" Orientation="Horizontal">
                    <Image Source="./Data/icons/a_switch_onOFF.png" Width="16" Height="16"
                           Visibility="{Binding IsExcludedFromDisplay, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                    <Image Source="./Data/icons/a_switch_onON.png" Width="16" Height="16"
                           Visibility="{Binding IsExcludedFromDisplay, Mode=OneWay, Converter={StaticResource ReverseBoolToVisConverterGroup}}"/>
                    <StackPanel.InputBindings>
                        <MouseBinding Gesture="LeftClick" Command="{Binding ToggleExcludedFromDisplay, Mode=OneWay}"/>
                    </StackPanel.InputBindings>
                </StackPanel>
                
            </Grid>
        </HierarchicalDataTemplate>
        
        <HierarchicalDataTemplate x:Key="ComponentWoControlsInList" DataType="{x:Type pscomp:Component}" ItemsSource="{Binding Children, Mode=OneWay}">
            <HierarchicalDataTemplate.Resources>
                <SolidColorBrush x:Key="OwnerSelectedBrush" Color="#33000000"/>
            </HierarchicalDataTemplate.Resources>
            <Grid>
                <Grid.ColumnDefinitions>
                    <!-- 0: selection lines -->
                    <ColumnDefinition Width="2"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 2: slot symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 4: locked / unlocked symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 6: state symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 8: slot name -->
                    <ColumnDefinition Width="150"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 10: Alignment Column -->
                    <ColumnDefinition Width="Auto" MinWidth="{Binding Converter={StaticResource TreeDepthToLengthConverter}, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}"/>
                    <!-- 11: Name -->
                    <ColumnDefinition Width="110"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 13: Description -->
                    <ColumnDefinition Width="120"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 15: Geometry Indicator UNUSED (just for alignment w REF slots) -->
                    <ColumnDefinition Width="16"/>
                </Grid.ColumnDefinitions>

                <!-- highlight for the component slot (differentiates components from parameters and calculations) -->
                <Rectangle Grid.Column="0" Grid.ColumnSpan="16" Stroke="DimGray" StrokeThickness="1"/>
                <Rectangle Grid.Column="0" Grid.ColumnSpan="16" Fill="{StaticResource OwnerSelectedBrush}" Visibility="{Binding ParentIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>

                <Rectangle Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Stretch"
                           Width="2" Fill="DimGray" Visibility="{Binding ParentIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                <Rectangle Grid.Column="0" Grid.ColumnSpan="4" VerticalAlignment="Bottom" HorizontalAlignment="Left" 
                           Width="20" Height="2" Fill="DimGray" Visibility="{Binding ParentIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>


                <StackPanel Grid.Column="2" Orientation="Horizontal" Visibility="{Binding IsBoundInNW, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}">
                    <Image Source="./Data/icons/xcomp_switch_Comp_COPY_inNWS.png" Width="16" Height="16"
                           Visibility="{Binding IsBoundInSelNW, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                    <Image Source="./Data/icons/xcomp_switch_Comp_COPY_inNW.png" Width="16" Height="16"
                           Visibility="{Binding IsBoundInSelNW, Mode=OneWay, Converter={StaticResource ReverseBoolToVisConverterGroup}}"/>
                </StackPanel>
                <StackPanel Grid.Column="2" Orientation="Horizontal" Visibility="{Binding IsBoundInNW, Mode=OneWay, Converter={StaticResource ReverseBoolToVisConverterGroup}}">
                    <Image Source="./Data/icons/xcomp_switch_Comp_COPY.png" Width="16" Height="16"/>
                </StackPanel>

                <StackPanel Grid.Column="4" Orientation="Horizontal">
                    <Image Source="./Data/icons/xcomp_switch_locked.png" Width="16" Height="16"
                           Visibility="{Binding IsLocked, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                    <Image Source="./Data/icons/xcomp_switch_unlocked.png" Width="16" Height="16"
                           Visibility="{Binding IsLocked, Mode=OneWay, Converter={StaticResource ReverseBoolToVisConverterGroup}}"/>
                </StackPanel>

                <Ellipse Grid.Column="6" Height="16" Width="16" Stroke="Black" Fill="White" HorizontalAlignment="Left"/>
                <Ellipse Grid.Column="6" Height="10" Width="10" HorizontalAlignment="Left" Margin="3,0,2,0" Stroke="Black">
                    <Ellipse.Fill>
                        <RadialGradientBrush>
                            <GradientStop Color="White" Offset="0"/>
                            <GradientStop Color="White" Offset="0.1"/>
                            <GradientStop Color="{Binding AccessLocal.ProfileState, Mode=OneWay, Converter={StaticResource ComponentValidityToColorConverter}}" Offset="1"/>
                        </RadialGradientBrush>
                    </Ellipse.Fill>
                </Ellipse>

                <Rectangle Grid.Column="8" StrokeThickness="1" Stroke="Black" Fill="#aaffffff"
                           RadiusX="{Binding IsAutomaticallyGenerated, Mode=OneWay, Converter={StaticResource BooleanToRadiusSizeConverter}}" 
                           RadiusY="{Binding IsAutomaticallyGenerated, Mode=OneWay, Converter={StaticResource BooleanToRadiusSizeConverter}}">                    
                </Rectangle>
                <TextBlock Grid.Column="8" Text="{Binding CurrentSlot, Mode=OneWay}" Foreground="Black" FontWeight="Bold" Padding="2,3,2,1"
                           Visibility="{Binding HideDetails, Mode=OneWay, Converter={StaticResource ReverseBoolToVisConverterGroup}}"/>
                <TextBlock Grid.Column="8" Text="{Binding CurrentSlot, Mode=OneWay}" Foreground="Gray" FontWeight="Normal" Padding="2,3,2,1"
                           Visibility="{Binding HideDetails, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>

                <!--ID: to remove -->
                <StackPanel Grid.Column="11" Orientation="Horizontal">
                    <TextBlock Width="26" Text="{Binding ID, Mode=OneWay}" TextAlignment="Right" Foreground="DimGray" FontStyle="Italic"/>
                    <TextBlock Width="80" Text="{Binding Name, Mode=OneWay}" Margin="4,0,0,0"/>
                </StackPanel>

                <TextBlock Grid.Column="13" Width="120" Text="{Binding Description, Mode=OneWay}"/>

            </Grid>
        </HierarchicalDataTemplate>

        <HierarchicalDataTemplate x:Key="ComponentWInstancesWoControlsInList" DataType="{x:Type pscomp:Component}" ItemsSource="{Binding InstancesAndChildren, Mode=OneWay}">
            <HierarchicalDataTemplate.Resources>
                <SolidColorBrush x:Key="OwnerSelectedBrush" Color="#33000000"/>
            </HierarchicalDataTemplate.Resources>
            <Grid>
                <Grid.ColumnDefinitions>
                    <!-- 0: selection lines -->
                    <ColumnDefinition Width="2"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 2: slot symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 4: locked / unlocked symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 6: state symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 8: slot name -->
                    <ColumnDefinition Width="150"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 10: Alignment Column -->
                    <ColumnDefinition Width="Auto" MinWidth="{Binding Converter={StaticResource TreeDepthToLengthConverter}, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}"/>
                    <!-- 11: Name -->
                    <ColumnDefinition Width="110"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 13: Description -->
                    <ColumnDefinition Width="120"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 15: Geometry Indicator UNUSED (just for alignment w REF slots) -->
                    <ColumnDefinition Width="16"/>
                </Grid.ColumnDefinitions>

                <!-- highlight for the component slot (differentiates components from parameters and calculations) -->
                <Rectangle Grid.Column="0" Grid.ColumnSpan="16" Stroke="DimGray" StrokeThickness="1"/>
                <Rectangle Grid.Column="0" Grid.ColumnSpan="16" Fill="{StaticResource OwnerSelectedBrush}" Visibility="{Binding ParentIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>

                <Rectangle Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Stretch"
                           Width="2" Fill="DimGray" Visibility="{Binding ParentIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                <Rectangle Grid.Column="0" Grid.ColumnSpan="4" VerticalAlignment="Bottom" HorizontalAlignment="Left" 
                           Width="20" Height="2" Fill="DimGray" Visibility="{Binding ParentIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>


                <StackPanel Grid.Column="2" Orientation="Horizontal" Visibility="{Binding IsBoundInNW, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}">
                    <Image Source="./Data/icons/xcomp_switch_Comp_COPY_inNWS.png" Width="16" Height="16"
                           Visibility="{Binding IsBoundInSelNW, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                    <Image Source="./Data/icons/xcomp_switch_Comp_COPY_inNW.png" Width="16" Height="16"
                           Visibility="{Binding IsBoundInSelNW, Mode=OneWay, Converter={StaticResource ReverseBoolToVisConverterGroup}}"/>
                </StackPanel>
                <StackPanel Grid.Column="2" Orientation="Horizontal" Visibility="{Binding IsBoundInNW, Mode=OneWay, Converter={StaticResource ReverseBoolToVisConverterGroup}}">
                    <Image Source="./Data/icons/xcomp_switch_Comp_COPY.png" Width="16" Height="16"/>
                </StackPanel>

                <StackPanel Grid.Column="4" Orientation="Horizontal">
                    <Image Source="./Data/icons/xcomp_switch_locked.png" Width="16" Height="16"
                           Visibility="{Binding IsLocked, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                    <Image Source="./Data/icons/xcomp_switch_unlocked.png" Width="16" Height="16"
                           Visibility="{Binding IsLocked, Mode=OneWay, Converter={StaticResource ReverseBoolToVisConverterGroup}}"/>
                </StackPanel>

                <Ellipse Grid.Column="6" Height="16" Width="16" Stroke="Black" Fill="White" HorizontalAlignment="Left"/>
                <Ellipse Grid.Column="6" Height="10" Width="10" HorizontalAlignment="Left" Margin="3,0,2,0" Stroke="Black">
                    <Ellipse.Fill>
                        <RadialGradientBrush>
                            <GradientStop Color="White" Offset="0"/>
                            <GradientStop Color="White" Offset="0.1"/>
                            <GradientStop Color="{Binding AccessLocal.ProfileState, Mode=OneWay, Converter={StaticResource ComponentValidityToColorConverter}}" Offset="1"/>
                        </RadialGradientBrush>
                    </Ellipse.Fill>
                </Ellipse>

                <Rectangle Grid.Column="8" StrokeThickness="1" Stroke="Black" Fill="#aaffffff"
                           RadiusX="{Binding IsAutomaticallyGenerated, Mode=OneWay, Converter={StaticResource BooleanToRadiusSizeConverter}}" 
                           RadiusY="{Binding IsAutomaticallyGenerated, Mode=OneWay, Converter={StaticResource BooleanToRadiusSizeConverter}}">
                </Rectangle>
                <TextBlock Grid.Column="8" Text="{Binding CurrentSlot, Mode=OneWay}" Foreground="Black" FontWeight="Bold" Padding="2,3,2,1"
                           Visibility="{Binding HideDetails, Mode=OneWay, Converter={StaticResource ReverseBoolToVisConverterGroup}}"/>
                <TextBlock Grid.Column="8" Text="{Binding CurrentSlot, Mode=OneWay}" Foreground="Gray" FontWeight="Normal" Padding="2,3,2,1"
                           Visibility="{Binding HideDetails, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>

                <!--ID: to remove -->
                <StackPanel Grid.Column="11" Orientation="Horizontal">
                    <TextBlock Width="26" Text="{Binding ID, Mode=OneWay}" TextAlignment="Right" Foreground="DimGray" FontStyle="Italic"/>
                    <TextBlock Width="80" Text="{Binding Name, Mode=OneWay}" Margin="4,0,0,0"/>
                </StackPanel>

                <TextBlock Grid.Column="13" Width="120" Text="{Binding Description, Mode=OneWay}"/>

            </Grid>
        </HierarchicalDataTemplate>

        <!-- TYPE SPECIFIC: Component HIDDEN -->
        <HierarchicalDataTemplate x:Key="ComponentInListHidden" DataType="{x:Type pscomp:Component}" ItemsSource="{Binding Children, Mode=OneWay}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <!-- 0: selection lines -->
                    <ColumnDefinition Width="2"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 2: slot symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 4: locked / unlocked symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 6: state symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 8: slot name -->
                    <ColumnDefinition Width="150"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 10: Alignment Column -->
                    <ColumnDefinition Width="Auto" MinWidth="{Binding Converter={StaticResource TreeDepthToLengthConverter}, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}"/>
                    <!-- 11: Name -->
                    <ColumnDefinition Width="110"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 13: Description -->
                    <ColumnDefinition Width="120"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 15: Geometry Indicator -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 17: Symbol -->
                    <ColumnDefinition Width="24"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 19: Checkbox for marking -->
                    <ColumnDefinition Width="20"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 21: Switch ON / OFF -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                </Grid.ColumnDefinitions>

                <Image Grid.Column="2" Source="./Data/icons/xcomp_switch_Comp_COPY_hidden.png"/>

                <Rectangle Grid.Column="8" StrokeThickness="1" Stroke="DimGray" RadiusX="2" RadiusY="2" Fill="Transparent"/>
                <TextBlock Grid.Column="8" Text="{Binding CurrentSlot, Mode=OneWay}" Foreground="DimGray" FontWeight="Normal" FontStyle="Italic" Padding="2,1"/>

                <!--ID: to remove -->
                <StackPanel Grid.Column="11" Orientation="Horizontal">
                    <TextBlock Width="26" Text="{Binding ID, Mode=OneWay}" Foreground="DimGray" FontStyle="Italic"/>
                    <TextBlock Width="80" Text="{Binding Name, Mode=OneWay}" Foreground="DimGray" FontStyle="Italic" Margin="4,0,0,0"/>
                </StackPanel>
                <TextBlock Grid.Column="13" Width="120" Text="{Binding Description, Mode=OneWay}" Foreground="DimGray" FontStyle="Italic"/>


            </Grid>
        </HierarchicalDataTemplate>

        <!-- TYPE SPECIFIC: Empty Slot of Component (in the Component List) -->
        <DataTemplate x:Key="ComponentSlotInList" DataType="{x:Type pscomp:EmptyComponentSlot}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <!-- 0: Padding -->
                    <ColumnDefinition Width="6"/>
                    <!-- 1: Slot Symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 3: Padding -->
                    <ColumnDefinition Width="40"/>
                    <!-- 4: Slot Name -->
                    <ColumnDefinition Width="150"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 6: Alignment Column -->
                    <!--<ColumnDefinition Width="Auto"/>-->
                    <ColumnDefinition Width="Auto" MinWidth="{Binding Converter={StaticResource TreeDepthToLengthConverter}, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" diag:PresentationTraceSources.TraceLevel="High"/>
                    <!-- 7: Name -->
                    <ColumnDefinition Width="254"/>
                </Grid.ColumnDefinitions>

                <!-- marker if the parent is selected -->
                <Rectangle Grid.Column="0" Grid.ColumnSpan="12" Stroke="DimGray" StrokeThickness="1" Visibility="{Binding ParentIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                <Rectangle Grid.Column="0" Grid.ColumnSpan="12" Visibility="{Binding ParentIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}">
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{Binding SlotType, Mode=OneWay, Converter={StaticResource IntToWinMediaColorFormCompSlotsConverter}}"/>
                    </Rectangle.Fill>
                </Rectangle>
                
                <Image Grid.Column="1" Source="./Data/icons/xcomp_switch_Comp_COPY.png"
                       Visibility="{Binding SlotType, Mode=OneWay, Converter={StaticResource IntToReverseVisibilityConverterGroup}}"/>
                <Image Grid.Column="1" Source="./Data/icons/xcomp_switch_Comp_REF.png"
                       Visibility="{Binding SlotType, Mode=OneWay, Converter={StaticResource IntToVisibilityConverterGroup}}"/>

                <Rectangle Grid.Column="4" StrokeThickness="1" Stroke="DimGray" RadiusX="2" RadiusY="2" Fill="#AAFFFFFF"/>
                <TextBlock Grid.Column="4" Text="{Binding SlotName, Mode=OneWay}" Foreground="DimGray" Padding="2,1"/>

                <TextBlock Grid.Column="7" Text="{Binding SlotDescr, Mode=OneWay}" TextAlignment="Left" FontStyle="Italic" Foreground="DimGray" Padding="2,1"/>

            </Grid>           
        </DataTemplate>

        <!-- TYPE SPECIFIC: Empty Slot of Component (in the Parameter List) -->
        <DataTemplate x:Key="ComponentSlotInParamList" DataType="{x:Type pscomp:EmptyComponentSlot}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <!-- 0: Padding -->
                    <ColumnDefinition Width="6"/>
                    <!-- 1: Slot Symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 3: Padding -->
                    <ColumnDefinition Width="40"/>
                    <!-- 4: Slot Name -->
                    <ColumnDefinition Width="150"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 6: Alignment Column -->
                    <ColumnDefinition Width="80"/>
                    <!-- 7: Name -->
                    <ColumnDefinition Width="254"/>
                </Grid.ColumnDefinitions>

                <!-- marker if the parent is selected -->
                <Rectangle Grid.Column="0" Grid.ColumnSpan="12" Stroke="DimGray" StrokeThickness="1" Visibility="{Binding ParentIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                <Rectangle Grid.Column="0" Grid.ColumnSpan="12" Visibility="{Binding ParentIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}">
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{Binding SlotType, Mode=OneWay, Converter={StaticResource IntToWinMediaColorFormCompSlotsConverter}}"/>
                    </Rectangle.Fill>
                </Rectangle>

                <Image Grid.Column="1" Source="./Data/icons/xcomp_switch_Comp_COPY.png"
                       Visibility="{Binding SlotType, Mode=OneWay, Converter={StaticResource IntToReverseVisibilityConverterGroup}}"/>
                <Image Grid.Column="1" Source="./Data/icons/xcomp_switch_Comp_REF.png"
                       Visibility="{Binding SlotType, Mode=OneWay, Converter={StaticResource IntToVisibilityConverterGroup}}"/>

                <Rectangle Grid.Column="4" Grid.ColumnSpan="6" StrokeThickness="1" Stroke="DimGray" RadiusX="2" RadiusY="2" Fill="#AAFFFFFF"/>
                <TextBlock Grid.Column="4" Grid.ColumnSpan="6" Text="{Binding SlotName, Mode=OneWay}" Foreground="DimGray" Padding="2,1"/>

                <TextBlock Grid.Column="7" Text="{Binding SlotDescr, Mode=OneWay}" TextAlignment="Left" FontStyle="Italic" Foreground="DimGray" Padding="2,1"/>

            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="ComponentSlotShortInParamList" DataType="{x:Type pscomp:EmptyComponentSlot}">
            <Grid MaxWidth="100">
                <Rectangle StrokeThickness="1" Stroke="DimGray" RadiusX="2" RadiusY="2"/>
                <TextBlock Text="{Binding SlotName, Mode=OneWay}" Foreground="DimGray" Padding="2,1"/>
            </Grid>
        </DataTemplate>

        <!-- TYPE SPECIFIC: Flow Network -->
        <HierarchicalDataTemplate x:Name="NetworkInList" DataType="{x:Type pscomp:FlowNetwork}" ItemsSource="{Binding Children, Mode=OneWay}">
            <Grid Height="22">
                <Grid.ColumnDefinitions>
                    <!-- 0: selection lines -->
                    <ColumnDefinition Width="2"/>
                    <ColumnDefinition Width="4"/>                    
                    <!-- 2: category symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 4: network symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 6: locked / unlocked symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 8: Alignment Column -->
                    <ColumnDefinition Width="Auto" MinWidth="{Binding Converter={StaticResource TreeDepthToLengthConverter_NW}, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}"/>
                    <!-- 9: Name -->
                    <ColumnDefinition Width="120"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 11: Description -->
                    <ColumnDefinition Width="120"/>                  
                    <ColumnDefinition Width="224"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 14: Checkbox for marking -->
                    <ColumnDefinition Width="20"/>
                </Grid.ColumnDefinitions>
                
                <!-- highlight for the network slot (differentiates networks from nodes and edges) -->
                <Rectangle Grid.Column="0" Grid.ColumnSpan="13" Stroke="DimGray" StrokeThickness="1"/>
                <Rectangle Grid.Column="0" Grid.ColumnSpan="13" Fill="#330000ff" Visibility="{Binding ParentIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>

                <Rectangle Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Stretch"
                           Width="2" Fill="DimGray" Visibility="{Binding ParentIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                <Rectangle Grid.Column="0" Grid.ColumnSpan="4" VerticalAlignment="Bottom" HorizontalAlignment="Left" 
                           Width="20" Height="2" Fill="DimGray" Visibility="{Binding ParentIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>

                <TextBlock Grid.Column="2"
                           Text="{Binding Manager, Mode=OneWay, Converter={StaticResource CompManagerTypeToLetterConverter}}" 
                           FontFamily="/ComponentBuilder;component/Data/fonts/#managers" FontSize="18"/>

                <Image Grid.Column="4" Source="./Data/icons/xcomp_switch_FN.png"/>

                <StackPanel Grid.Column="6" Orientation="Horizontal">
                    <Image Source="./Data/icons/xcomp_switch_locked.png" Width="16" Height="16"
                           Visibility="{Binding IsLocked, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                    <Image Source="./Data/icons/xcomp_switch_unlocked.png" Width="16" Height="16"
                           Visibility="{Binding IsLocked, Mode=OneWay, Converter={StaticResource ReverseBoolToVisConverterGroup}}"/>
                </StackPanel>

                <TextBlock Grid.Column="9" Text="{Binding Name, Mode=OneWay}" Padding="5,2,0,0"/>

                <TextBlock Grid.Column="11" Text="{Binding Description, Mode=OneWay}" Padding="5,2,0,0"/>

                <CheckBox Grid.Column="14" IsChecked="{Binding IsMarked, Mode=TwoWay}" Visibility="{Binding IsMarkable, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>

            </Grid>
        </HierarchicalDataTemplate>
        
        <!-- TYPE SPCEIFIC: Nodes and Edges of a Flow Network-->
        <DataTemplate x:Name="FlNetNodeInList" DataType="{x:Type pscomp:FlNetNode}">
            <Grid Height="22">
                <Grid.ColumnDefinitions>
                    <!-- 0: selection lines -->
                    <ColumnDefinition Width="2"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 2: node symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 4: locked / unlocked symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="24"/>
                    <!-- 6: Alignment Column -->
                    <ColumnDefinition Width="Auto" MinWidth="{Binding Converter={StaticResource TreeDepthToLengthConverter_NW}, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}"/>
                    <!-- 7: Name -->
                    <ColumnDefinition Width="120"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 9: Associated Component Name -->
                    <ColumnDefinition Width="120"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 11: Position Symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 13: Position -->
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="124"/>
                </Grid.ColumnDefinitions>

                <Rectangle Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Stretch"
                           Width="2" Fill="DimGray" Visibility="{Binding ParentIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                <Rectangle Grid.Column="0" Grid.ColumnSpan="15" Fill="#330000ff" Visibility="{Binding ParentIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                
                <Image Grid.Column="2" Source="./Data/icons/xcomp_switch_FN_node.png"/>

                <StackPanel Grid.Column="4" Orientation="Horizontal">
                    <Image Source="./Data/icons/xcomp_switch_locked.png" Width="16" Height="16"
                           Visibility="{Binding IsLocked, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                    <Image Source="./Data/icons/xcomp_switch_unlocked.png" Width="16" Height="16"
                           Visibility="{Binding IsLocked, Mode=OneWay, Converter={StaticResource ReverseBoolToVisConverterGroup}}"/>
                </StackPanel>

                <TextBlock Grid.Column="7" Text="{Binding Name, Mode=OneWay}" Padding="5,2,0,0">
                    <TextBlock.Foreground>
                        <SolidColorBrush  Color="{Binding IsValid, Mode=OneWay, Converter={StaticResource ValidityToWinMediaColorConverter}}"/>
                    </TextBlock.Foreground>
                </TextBlock>
                
                <Rectangle Grid.Column="9" Stroke="Black" StrokeThickness="2" RadiusX="2" RadiusY="2" Fill="#33000000"/>
                <TextBlock Grid.Column="9" Text="{Binding ContentInfo, Mode=OneWay, FallbackValue=leer}" Padding="5,2,0,0">
                    <TextBlock.Foreground>
                        <SolidColorBrush  Color="{Binding IsValid, Mode=OneWay, Converter={StaticResource ValidityToWinMediaColorConverter}}"/>
                    </TextBlock.Foreground>
                </TextBlock>

                <Image Grid.Column="11" Source="./Data/icons/xcomp_switch_FN_pos.png"/>
                
                <TextBlock Grid.Column="13" Text="{Binding Position, Mode=OneWay, Converter={StaticResource PointToStringConverter}}" Padding="5,2,0,0">
                    <TextBlock.Foreground>
                        <SolidColorBrush  Color="{Binding IsValid, Mode=OneWay, Converter={StaticResource ValidityToWinMediaColorConverter}}"/>
                    </TextBlock.Foreground>
                </TextBlock>

            </Grid>
        </DataTemplate>

        <DataTemplate x:Name="FlNetEdgeInList" DataType="{x:Type pscomp:FlNetEdge}">
            <Grid Height="22">
                <Grid.ColumnDefinitions>
                    <!-- 0: selection lines -->
                    <ColumnDefinition Width="2"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 2: edge symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 4: locked / unlocked symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="24"/>
                    <!-- 6: Alignment Column -->
                    <ColumnDefinition Width="Auto" MinWidth="{Binding Converter={StaticResource TreeDepthToLengthConverter_NW}, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}"/>
                    <!-- 7: Name -->
                    <ColumnDefinition Width="120"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 9: Associated Component Name -->
                    <ColumnDefinition Width="120"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 11: Start Node Symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 13: Start Node -->
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 15: End Node Symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 17: End Node -->
                    <ColumnDefinition Width="100"/>
                </Grid.ColumnDefinitions>

                <Rectangle Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Stretch"
                           Width="2" Fill="DimGray" Visibility="{Binding ParentIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                <Rectangle Grid.Column="0" Grid.ColumnSpan="18" Fill="#330000ff" Visibility="{Binding ParentIsSelected, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                
                <Image Grid.Column="2" Source="./Data/icons/xcomp_switch_FN_edge.png"/>

                <StackPanel Grid.Column="4" Orientation="Horizontal">
                    <Image Source="./Data/icons/xcomp_switch_locked.png" Width="16" Height="16"
                           Visibility="{Binding IsLocked, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                    <Image Source="./Data/icons/xcomp_switch_unlocked.png" Width="16" Height="16"
                           Visibility="{Binding IsLocked, Mode=OneWay, Converter={StaticResource ReverseBoolToVisConverterGroup}}"/>
                </StackPanel>

                <TextBlock Grid.Column="7" Text="{Binding Name, Mode=OneWay}" Padding="5,2,0,0">
                    <TextBlock.Foreground>
                        <SolidColorBrush  Color="{Binding IsValid, Mode=OneWay, Converter={StaticResource ValidityToWinMediaColorConverter}}"/>
                    </TextBlock.Foreground>
                </TextBlock>
                
                <Rectangle Grid.Column="9" Stroke="Black" StrokeThickness="2" RadiusX="2" RadiusY="2" Fill="#33000000"/>
                <TextBlock Grid.Column="9" Text="{Binding ContentInfo, Mode=OneWay, FallbackValue=leer}" Padding="5,2,0,0">
                    <TextBlock.Foreground>
                        <SolidColorBrush  Color="{Binding IsValid, Mode=OneWay, Converter={StaticResource ValidityToWinMediaColorConverter}}"/>
                    </TextBlock.Foreground>
                </TextBlock>

                <Image Grid.Column="11" Source="./Data/icons/xcomp_switch_FN_from.png"/>
                <TextBlock Grid.Column="13" Text="{Binding Start.Name, Mode=OneWay}" Padding="5,2,0,0"/>

                <Image Grid.Column="15" Source="./Data/icons/xcomp_switch_FN_to.png"/>
                <TextBlock Grid.Column="17" Text="{Binding End.Name, Mode=OneWay}" Padding="5,2,0,0"/>

            </Grid>
        </DataTemplate>

        <!-- TYPE SPECIFIC: NULL -->
        <DataTemplate x:Key="DT_Empty">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="4"/>
                    <ColumnDefinition Width="8"/>
                    <ColumnDefinition Width="4"/>
                    <ColumnDefinition Width="8"/>
                    <ColumnDefinition Width="60"/>
                </Grid.ColumnDefinitions>
                <Rectangle Grid.Column="0" Width="4" Height="16" Stroke="Black" Fill="Gray" StrokeThickness="1"/>
                <Rectangle Grid.Column="2" Width="4" Height="16" Stroke="Black" Fill="Gray" StrokeThickness="1"/>
                <TextBlock Grid.Column="4" Text=" ... leer ... " Foreground="DimGray"/>
            </Grid>
        </DataTemplate>
        
        <Style x:Key="ListItemForStructuredParameters" TargetType="{x:Type ListViewItem}">
            <Style.Resources>
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Blue"/>
                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="#FF82D3FF"/>
            </Style.Resources>
            <!-- the Fucusable property makes sure only PARAMETERS can be selected ! -->
            <Setter Property="Focusable" Value="{Binding Converter={StaticResource IsParameterToBoolConverter}}"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <!--<Setter Property="Opacity" Value="0.5"/>-->           
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="true" >
                    <!--<Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.HighlightBrushKey}}" />-->
                    <Setter Property="BorderThickness" Value="2"/>
                    <!--<Setter Property="Opacity" Value="1"/>-->
                    <Setter Property="Effect">
                        <Setter.Value>
                            <DropShadowEffect Color="Blue" Opacity="0.5" BlurRadius="1" ShadowDepth="2"/>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="FontSize" Value="14"/>
                </Trigger>
            </Style.Triggers>
            
        </Style>

        <Style x:Key="ListItemForStructuredCalculations" TargetType="{x:Type ListViewItem}">
            <!-- the Fucusable property makes sure only PARAMETERS can be selected ! -->
            <Setter Property="Focusable" Value="{Binding Converter={StaticResource IsCalculationToBoolConverter}}"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="true" >
                    <Setter Property="BorderThickness" Value="2"/>
                    <Setter Property="Effect">
                        <Setter.Value>
                            <DropShadowEffect Color="Blue" Opacity="0.5" BlurRadius="1" ShadowDepth="2"/>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="FontSize" Value="14"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- TYPE SPECIFIC: Group Style For the TreeView-->
        <Style x:Key="CompGroupItem" TargetType="{x:Type GroupItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Expander x:Name="exp" IsExpanded="True" BorderBrush="DimGray" BorderThickness="1">
                            <Expander.Header>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock x:Name="tb_name" Text="{Binding Name}" FontWeight="Bold" FontSize="14" VerticalAlignment="Bottom" />
                                    <TextBlock x:Name="tb_items_count" Text="{Binding ItemCount}" FontWeight="Bold" FontSize="14" FontStyle="Italic" Margin="10,0,0,0" VerticalAlignment="Bottom" />
                                    <TextBlock x:Name="tb_items" Text=" item(s)" FontSize="14" FontStyle="Italic" VerticalAlignment="Bottom" />
                                </StackPanel>
                            </Expander.Header>
                            <ItemsPresenter />
                        </Expander>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" TargetName="exp" Value="Black"/>
                                <Setter Property="BorderThickness" TargetName="exp" Value="2"/>
                                <Setter Property="Foreground" TargetName="tb_name" Value="Blue"/>
                                <Setter Property="Foreground" TargetName="tb_items_count" Value="Blue"/>
                                <Setter Property="Foreground" TargetName="tb_items" Value="Blue"/>
                                <Setter Property="Effect" TargetName="tb_name">
                                    <Setter.Value>
                                        <DropShadowEffect Color="#FFffffff" Opacity="1" BlurRadius="2" ShadowDepth="2"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <!-- TYPE SPECIFIC: Geometric Relationship For ListView -->
        <!-- Note: When using a DataTemplate in another make sure they are defined in the correct order, otherwise you get a System.Windows.Markup.XamlParseException -->
        <DataTemplate x:Key="Matrix3DCompact" DataType="{x:Type Matrix3D}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>              

                <TextBlock Grid.Column="0" Grid.Row="0" Padding="1,0,2,0" Foreground="OrangeRed" FontSize="10" HorizontalAlignment="Right" FontWeight="Bold" 
                           Text="{Binding M11, Mode=OneWay, Converter={StaticResource DoubleStringToStringConverter}}"/>
                <TextBlock Grid.Column="1" Grid.Row="0" Padding="1,0,2,0" Foreground="OrangeRed" FontSize="10" HorizontalAlignment="Right" FontWeight="Bold" 
                           Text="{Binding M12, Mode=OneWay, Converter={StaticResource DoubleStringToStringConverter}}"/>
                <TextBlock Grid.Column="2" Grid.Row="0" Padding="1,0,2,0" Foreground="OrangeRed" FontSize="10" HorizontalAlignment="Right" FontWeight="Bold" 
                           Text="{Binding M13, Mode=OneWay, Converter={StaticResource DoubleStringToStringConverter}}"/>
                <TextBlock Grid.Column="3" Grid.Row="0" Padding="1,0,2,0" Foreground="Firebrick" FontSize="10" HorizontalAlignment="Right" FontWeight="Bold" 
                           Text="{Binding M14, Mode=OneWay, Converter={StaticResource DoubleStringToStringConverter}}"/>

                <TextBlock Grid.Column="0" Grid.Row="1" Padding="1,0,2,0" Foreground="Blue" FontSize="10" HorizontalAlignment="Right" FontWeight="Bold" 
                           Text="{Binding M21, Mode=OneWay, Converter={StaticResource DoubleStringToStringConverter}}"/>
                <TextBlock Grid.Column="1" Grid.Row="1" Padding="1,0,2,0" Foreground="Blue" FontSize="10" HorizontalAlignment="Right" FontWeight="Bold" 
                           Text="{Binding M22, Mode=OneWay, Converter={StaticResource DoubleStringToStringConverter}}"/>
                <TextBlock Grid.Column="2" Grid.Row="1" Padding="1,0,2,0" Foreground="Blue" FontSize="10" HorizontalAlignment="Right" FontWeight="Bold" 
                           Text="{Binding M23, Mode=OneWay, Converter={StaticResource DoubleStringToStringConverter}}"/>
                <TextBlock Grid.Column="3" Grid.Row="1" Padding="1,0,2,0" Foreground="Navy" FontSize="10" HorizontalAlignment="Right" FontWeight="Bold" 
                           Text="{Binding M24, Mode=OneWay, Converter={StaticResource DoubleStringToStringConverter}}"/>

                <TextBlock Grid.Column="0" Grid.Row="2" Padding="1,0,2,0" Foreground="Gray" FontSize="10" HorizontalAlignment="Right" FontWeight="Bold" 
                           Text="{Binding M31, Mode=OneWay, Converter={StaticResource DoubleStringToStringConverter}}"/>
                <TextBlock Grid.Column="1" Grid.Row="2" Padding="1,0,2,0" Foreground="Gray" FontSize="10" HorizontalAlignment="Right" FontWeight="Bold" 
                           Text="{Binding M32, Mode=OneWay, Converter={StaticResource DoubleStringToStringConverter}}"/>
                <TextBlock Grid.Column="2" Grid.Row="2" Padding="1,0,2,0" Foreground="Gray" FontSize="10" HorizontalAlignment="Right" FontWeight="Bold" 
                           Text="{Binding M33, Mode=OneWay, Converter={StaticResource DoubleStringToStringConverter}}"/>
                <TextBlock Grid.Column="3" Grid.Row="2" Padding="1,0,2,0" Foreground="DimGray" FontSize="10" HorizontalAlignment="Right" FontWeight="Bold"
                           Text="{Binding M34, Mode=OneWay, Converter={StaticResource DoubleStringToStringConverter}}"/>

                <TextBlock Grid.Column="0" Grid.Row="3" Padding="1,0,2,0" Foreground="Black" FontSize="10" HorizontalAlignment="Right" FontWeight="Bold" 
                           Text="{Binding OffsetX, Mode=OneWay, Converter={StaticResource DoubleStringToStringConverter}}"/>
                <TextBlock Grid.Column="1" Grid.Row="3" Padding="1,0,2,0" Foreground="Black" FontSize="10" HorizontalAlignment="Right" FontWeight="Bold" 
                           Text="{Binding OffsetY, Mode=OneWay, Converter={StaticResource DoubleStringToStringConverter}}"/>
                <TextBlock Grid.Column="2" Grid.Row="3" Padding="1,0,2,0" Foreground="Black" FontSize="10" HorizontalAlignment="Right" FontWeight="Bold" 
                           Text="{Binding OffsetZ, Mode=OneWay, Converter={StaticResource DoubleStringToStringConverter}}"/>
                <TextBlock Grid.Column="3" Grid.Row="3" Padding="1,0,2,0" Foreground="Black" FontSize="10" HorizontalAlignment="Right" FontWeight="Bold" 
                           Text="{Binding M44, Mode=OneWay, Converter={StaticResource DoubleStringToStringConverter}}"/>

            </Grid>
        </DataTemplate>
        
        <DataTemplate x:Key="GeomRelationshipInList" DataType="{x:Type psgr:GeometricRelationship}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <!-- 0: Id, Name State -->
                    <ColumnDefinition Width="80"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 2-7: Referenced Geometry Info -->
                    <ColumnDefinition Width="80"/>
                    <ColumnDefinition Width="4"/>
                    <ColumnDefinition Width="40"/>
                    <ColumnDefinition Width="4"/>
                    <ColumnDefinition Width="130"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 8-11: Network Element Info -->
                    <ColumnDefinition Width="80"/>
                    <ColumnDefinition Width="4"/>
                    <ColumnDefinition Width="80"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 12-15: Instance Parameters -->
                    <ColumnDefinition/>
                    <ColumnDefinition Width="4"/>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="4"/>
                    <!-- 16-18: Path Points -->
                    <ColumnDefinition/>
                    <ColumnDefinition Width="4"/>
                    <ColumnDefinition/>
                    
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                
                <!-- ID, Name, State -->
                <TextBlock Grid.Column="0" Grid.Row="0" Text="{Binding ID, Mode=OneWay}" Foreground="Black" FontWeight="Bold" FontStyle="Italic"/>
                <TextBlock Grid.Column="0" Grid.Row="1" Text="{Binding Name, Mode=OneWay}" Foreground="Black"/>
                <TextBlock Grid.Column="0" Grid.Row="2" Text="{Binding State.Type, Mode=OneWay}" Foreground="Black" FontWeight="Bold" FontSize="10">
                    <TextBlock.Effect>
                        <DropShadowEffect Color="Blue" BlurRadius="3" ShadowDepth="3" Opacity="{Binding State.IsRealized, Mode=OneWay, Converter={StaticResource BoolToOpacityConverter}}"/>
                    </TextBlock.Effect>
                </TextBlock>
                
                <!-- Referenced Geometry Info -->
                <Rectangle Grid.Column="2" Grid.Row="0" Grid.ColumnSpan="3" Grid.RowSpan="4" StrokeThickness="1" RadiusX="2" RadiusY="2" Stroke="Black" Fill="#29000000"/>
                <TextBlock Grid.Column="2" Grid.Row="0" Text="VOLUMEN-ID:" FontSize="10" Foreground="Black" Padding="2,0,0,0"/>
                <TextBlock Grid.Column="4" Grid.Row="0" Text="{Binding GeomIDs.X, Mode=OneWay}" Foreground="Black" FontWeight="Bold" HorizontalAlignment="Right" Padding="0,0,2,0"/>
                <TextBlock Grid.Column="2" Grid.Row="1" Text="LABEL/LEVEL:" FontSize="10" Foreground="Black" Padding="2,0,0,0"/>
                <TextBlock Grid.Column="4" Grid.Row="1" Text="{Binding GeomIDs.Y, Mode=OneWay}" Foreground="Black" FontWeight="Bold" HorizontalAlignment="Right" Padding="0,0,2,0"/>
                <TextBlock Grid.Column="2" Grid.Row="2" Text="OPENING_IND:" FontSize="10" Foreground="Black" Padding="2,0,0,0"/>
                <TextBlock Grid.Column="4" Grid.Row="2" Text="{Binding GeomIDs.Z, Mode=OneWay}" Foreground="Black" FontWeight="Bold" HorizontalAlignment="Right" Padding="0,0,2,0"/>
                <TextBlock Grid.Column="2" Grid.Row="3" Text="BASEPOLY-ID:" FontSize="10" Foreground="Black" Padding="2,0,0,0"/>
                <TextBlock Grid.Column="4" Grid.Row="3" Text="{Binding GeomIDs.W, Mode=OneWay}" Foreground="Black" FontWeight="Bold" HorizontalAlignment="Right" Padding="0,0,2,0"/>

                <Rectangle Grid.Column="6" Grid.Row="0" Grid.RowSpan="4" StrokeThickness="1" RadiusX="2" RadiusY="2" Stroke="DimGray" Fill="#22000000"/>
                <StackPanel Grid.Column="6" Grid.Row="0" Grid.RowSpan="4" Orientation="Horizontal">
                    <ContentPresenter ContentTemplate="{StaticResource Matrix3DCompact}" Content="{Binding GeomCS, Mode=OneWay}" HorizontalAlignment="Stretch"/>
                </StackPanel>

                <!-- Network Element Info -->
                <Rectangle Grid.Column="8" Grid.Row="0" Grid.ColumnSpan="3" Grid.RowSpan="4" StrokeThickness="1" RadiusX="2" RadiusY="2" Stroke="DimGray" Fill="#22000000"/>
                <TextBlock Grid.Column="8" Grid.Row="0" Text="NWELEM-ID:" FontSize="10" Foreground="Black" Padding="2,0,0,0"/>
                <TextBlock Grid.Column="10" Grid.Row="0" Text="{Binding InstanceNWElementID, Mode=OneWay}" FontSize="10" Foreground="Black" FontWeight="Bold" HorizontalAlignment="Right" Padding="0,0,2,0"/>
                <TextBlock Grid.Column="8" Grid.Row="1" Text="NWELEM-NAME:" FontSize="10" Foreground="Black" Padding="2,0,0,0"/>
                <TextBlock Grid.Column="10" Grid.Row="1" Text="{Binding InstanceNWElementName, Mode=OneWay}" FontSize="10" Foreground="Black" HorizontalAlignment="Right" Padding="0,0,2,0"/>
                <TextBlock Grid.Column="8" Grid.Row="2" Text="MIN H B L:" FontSize="10" Foreground="Black" Padding="2,0,0,0"/>
                <TextBlock Grid.Column="10" Grid.Row="2" Text="{Binding DerivedSizeMinStr, Mode=OneWay}" FontSize="10" Foreground="Black" FontWeight="Bold" HorizontalAlignment="Right" Padding="0,0,2,0"/>
                <TextBlock Grid.Column="8" Grid.Row="3" Text="MAX H B L:" FontSize="10" Foreground="Black" Padding="2,0,0,0"/>
                <TextBlock Grid.Column="10" Grid.Row="3" Text="{Binding DerivedSizeMaxStr, Mode=OneWay}" FontSize="10" Foreground="Black" FontWeight="Bold" HorizontalAlignment="Right" Padding="0,0,2,0"/>
                
                <!-- Instance parameters  -->
                <TextBlock Grid.Column="12" Grid.Row="0" Text="{Binding DerivedInstanceParamValues.S1, Mode=OneWay}" FontSize="10" Foreground="Navy"/>
                <TextBlock Grid.Column="12" Grid.Row="1" Text="{Binding DerivedInstanceParamValues.S2, Mode=OneWay}" FontSize="10" Foreground="Navy"/>
                <TextBlock Grid.Column="12" Grid.Row="2" Text="{Binding DerivedInstanceParamValues.S3, Mode=OneWay}" FontSize="10" Foreground="Navy"/>
                <TextBlock Grid.Column="12" Grid.Row="3" Text="{Binding DerivedInstanceParamValues.S4, Mode=OneWay}" FontSize="10" Foreground="Navy"/>

                <TextBlock Grid.Column="14" Grid.Row="0" Text="{Binding DerivedInstanceParamValues.S5, Mode=OneWay}" FontSize="10" Foreground="Navy"/>
                <TextBlock Grid.Column="14" Grid.Row="1" Text="{Binding DerivedInstanceParamValues.S6, Mode=OneWay}" FontSize="10" Foreground="Navy"/>
                <TextBlock Grid.Column="14" Grid.Row="2" Text="{Binding DerivedInstanceParamValues.S7, Mode=OneWay}" FontSize="10" Foreground="Navy"/>
                <TextBlock Grid.Column="14" Grid.Row="3" Text="{Binding DerivedInstanceParamValues.S8, Mode=OneWay}" FontSize="10" Foreground="Navy"/>
                
                <!-- Instance Path -->
                <TextBlock Grid.Column="16" Grid.Row="0" Text="{Binding DerivedInstancePathStr.S1, Mode=OneWay}" FontSize="10" Foreground="Blue" FontWeight="Bold"/>
                <TextBlock Grid.Column="16" Grid.Row="1" Text="{Binding DerivedInstancePathStr.S2, Mode=OneWay}" FontSize="10" Foreground="Blue"/>
                <TextBlock Grid.Column="16" Grid.Row="2" Text="{Binding DerivedInstancePathStr.S3, Mode=OneWay}" FontSize="10" Foreground="Blue"/>
                <TextBlock Grid.Column="16" Grid.Row="3" Text="{Binding DerivedInstancePathStr.S4, Mode=OneWay}" FontSize="10" Foreground="Blue"/>

                <TextBlock Grid.Column="18" Grid.Row="0" Text="{Binding DerivedInstancePathStr.S5, Mode=OneWay}" FontSize="10" Foreground="Blue"/>
                <TextBlock Grid.Column="18" Grid.Row="1" Text="{Binding DerivedInstancePathStr.S6, Mode=OneWay}" FontSize="10" Foreground="Blue"/>
                <TextBlock Grid.Column="18" Grid.Row="2" Text="{Binding DerivedInstancePathStr.S7, Mode=OneWay}" FontSize="10" Foreground="Blue"/>
                <TextBlock Grid.Column="18" Grid.Row="3" Text="{Binding DerivedInstancePathStr.S8, Mode=OneWay}" FontSize="10" Foreground="Blue"/>

            </Grid>
        </DataTemplate>

        <Style x:Key="ListItemForGeomRel" TargetType="{x:Type ListViewItem}">
            <Style.Resources>
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Blue"/>
                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="#FF82D3FF"/>
            </Style.Resources>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="true" >
                    <Setter Property="BorderThickness" Value="2"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <HierarchicalDataTemplate x:Key="GeomRelationshipInMappingTree" DataType="{x:Type psgr:GeometricRelationship}" ItemsSource="{Binding GeometricContent, Mode=OneWay}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="6"/>
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <ColumnDefinition MinWidth="{Binding Converter={StaticResource TreeDepthToLengthConverter}, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}"/>
                    <ColumnDefinition Width="426"/>
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="6"/>
                </Grid.ColumnDefinitions>

                <Rectangle Grid.Column="0" Grid.ColumnSpan="7" StrokeThickness="1" Stroke="#88696969" Fill="#11000000" RadiusX="2" RadiusY="2"/>
                
                <StackPanel Grid.Column="1" Orientation="Horizontal"
                            ToolTip="{Binding State, Mode=OneWay, Converter={StaticResource Relation2GeomTypeToStringConverter}}">
                    <Image Source="./Data/icons/xcomp_switch_Comp_GNone.png" Width="16" Height="16"
                           Visibility="{Binding State, Mode=OneWay, Converter={StaticResource Relation2GeomTypeToVisibiltyConverterGroup}, ConverterParameter=NONE}"/>
                    <Image Source="./Data/icons/xcomp_switch_Comp_GInSub.png" Width="16" Height="16"
                           Visibility="{Binding State, Mode=OneWay, Converter={StaticResource Relation2GeomTypeToVisibiltyConverterGroup}, ConverterParameter=DESCRIBES}"/>
                    <Image Source="./Data/icons/xcomp_switch_Comp_GDescribes.png" Width="16" Height="16"
                           Visibility="{Binding State, Mode=OneWay, Converter={StaticResource Relation2GeomTypeToVisibiltyConverterGroup}, ConverterParameter=DESCRIBES_3D}"/>
                    <Image Source="./Data/icons/xcomp_switch_Comp_GDescribesE.png" Width="16" Height="16"
                           Visibility="{Binding State, Mode=OneWay, Converter={StaticResource Relation2GeomTypeToVisibiltyConverterGroup}, ConverterParameter=DESCRIBES_2DorLESS}"/>
                    <Image Source="./Data/icons/xcomp_switch_Comp_GAligned.png" Width="16" Height="16"
                           Visibility="{Binding State, Mode=OneWay, Converter={StaticResource Relation2GeomTypeToVisibiltyConverterGroup}, ConverterParameter=ALIGNED_WITH}"/>
                    <Image Source="./Data/icons/xcomp_switch_Comp_GContained.png" Width="16" Height="16"
                           Visibility="{Binding State, Mode=OneWay, Converter={StaticResource Relation2GeomTypeToVisibiltyConverterGroup}, ConverterParameter=CONTAINED_IN}"/>
                    <Image Source="./Data/icons/xcomp_switch_Comp_GConnects.png" Width="16" Height="16"
                           Visibility="{Binding State, Mode=OneWay, Converter={StaticResource Relation2GeomTypeToVisibiltyConverterGroup}, ConverterParameter=CONNECTS}"/>
                    <Image Source="./Data/icons/xcomp_switch_Comp_GGrouped.png" Width="16" Height="16"
                           Visibility="{Binding State, Mode=OneWay, Converter={StaticResource Relation2GeomTypeToVisibiltyConverterGroup}, ConverterParameter=GROUPS}"/>
                </StackPanel>

                <TextBlock Grid.Column="3" Height="20" Text="{Binding Name, Mode=OneWay}"/>

                <Image Grid.Column="5" Source="./Data/icons/xcomp_switch_toWS.png" Width="16" Height="16"/>

            </Grid>
        </HierarchicalDataTemplate>

        <HierarchicalDataTemplate x:Key="HierarchicalContainerInList" DataType="{x:Type psgr:HierarchicalContainer}" ItemsSource="{Binding Children, Mode=OneWay}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <ColumnDefinition Width="139"/>
                    <ColumnDefinition Width="4"/>
                    <ColumnDefinition Width="90"/>
                    <ColumnDefinition MinWidth="{Binding Converter={StaticResource TreeDepthToLengthConverter}, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}"/>
                    <ColumnDefinition Width="220"/>
                </Grid.ColumnDefinitions>

                <StackPanel Grid.Column="0" Orientation="Horizontal">
                    <Image Source="./Data/icons/ws_type_simple.png" Width="16" Height="16"
                           Opacity="0.5"
                           Visibility="{Binding IsLeaf, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                    <Image Source="./Data/icons/ws_type_complex.png" Width="16" Height="16"
                           Opacity="0.5"
                           Visibility="{Binding IsLeaf, Mode=OneWay, Converter={StaticResource ReverseBoolToVisConverterGroup}}"/>
                </StackPanel>
                
                <TextBlock Grid.Column="2" Text="{Binding Label, Mode=OneWay}"/>


                <Rectangle Grid.Column="4" Height="20" StrokeThickness="2" Stroke="Black" Fill="#33000000" RadiusX="2" RadiusY="2"
                           Visibility="{Binding IsLeaf, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                <TextBlock Grid.Column="4" Height="20" Text="{Binding ContentValue, Mode=OneWay}" HorizontalAlignment="Right" FontWeight="Bold" Padding="0,0,2,0"/>

            </Grid>
        </HierarchicalDataTemplate>

        <!-- TYPE SPECIFIC: TypeNode -->
        <HierarchicalDataTemplate x:Key="TypeNodeInList" DataType="{x:Type cbwsc:TypeNode}" ItemsSource="{Binding SubNodes, Mode=OneWay}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <!-- 0: type symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 2: label in the ancestor type -->
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 4: type name in layman's terms -->
                    <ColumnDefinition/>
                    <ColumnDefinition Width="4"/>
                    <!-- 6: multiplicity symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 8: mapping state symbol -->
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="4"/>
                    <!-- 10: instance representation -->
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                
                <StackPanel Grid.Column="0" Orientation="Horizontal">
                    <Image Source="./Data/icons/ws_type_simple.png" Width="16" Height="16"
                           Opacity="{Binding IsOptional, Mode=OneWay, Converter={StaticResource BoolToOpacityConverter1}}"
                           Visibility="{Binding BindingType, Mode=OneWay, Converter={StaticResource TypeNodeContentBindingTypeToVisibiltyConverterGroup}, ConverterParameter=SIMPLE}"/>
                    <Image Source="./Data/icons/ws_type_complex.png" Width="16" Height="16"
                           Opacity="{Binding IsOptional, Mode=OneWay, Converter={StaticResource BoolToOpacityConverter1}}"
                           Visibility="{Binding BindingType, Mode=OneWay, Converter={StaticResource TypeNodeContentBindingTypeToVisibiltyConverterGroup}, ConverterParameter=COMPLEX}"/>
                    <Image Source="./Data/icons/ws_type_key.png" Width="16" Height="16"
                           Visibility="{Binding BindingType, Mode=OneWay, Converter={StaticResource TypeNodeContentBindingTypeToVisibiltyConverterGroup}, ConverterParameter=KEY}"/>
                </StackPanel>
                
                <TextBlock Grid.Column="2" Text="{Binding Label, Mode=OneWay}"
                           Visibility="{Binding BindingType, Mode=OneWay, Converter={StaticResource TypeNodeContentBindingTypeToVisibiltyConverterGroup}, ConverterParameter=SIMPLE+COMPLEX+NOT_BINDABLE}">
                    <TextBlock.Foreground>
                        <SolidColorBrush Color="{Binding IsOptional, Mode=OneWay, Converter={StaticResource BoolToWinMediaColorWOpacityConverter2}}" />
                    </TextBlock.Foreground>
                </TextBlock>
                <TextBlock Grid.Column="4" Text="{Binding TypeDescription, Mode=OneWay}" FontWeight="Bold">
                    <TextBlock.Foreground>
                        <SolidColorBrush Color="{Binding IsOptional, Mode=OneWay, Converter={StaticResource BoolToWinMediaColorWOpacityConverter2}}" />
                    </TextBlock.Foreground>
                </TextBlock>

                <Image Grid.Column="6" Source="./Data/icons/menu/menu_SUB_on.png" Width="16" Height="16" 
                       ToolTip="kann mehrere Mappings empfangen"
                       Opacity="0.25"
                       Visibility="{Binding CanHaveMultipleMappings, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                
                <StackPanel Grid.Column="8" Orientation="Horizontal"
                            Visibility="{Binding MappingComplete, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}">
                    <Image Source="./Data/icons/menu/menu_OK.png" Width="16" Height="16" 
                           ToolTip="indirektes Mapping vorhanden"
                           Visibility="{Binding MappingIsDirect, Mode=OneWay, Converter={StaticResource ReverseBoolToVisConverterGroup}}"/>
                    <Image Source="./Data/icons/menu/menu_OK_OK.png" Width="16" Height="16" 
                           ToolTip="direktes Mapping vorhanden"
                           Visibility="{Binding MappingIsDirect, Mode=OneWay, Converter={StaticResource BooleanToVisibiltyConverter}}"/>
                </StackPanel>
                
                <TextBlock Grid.Column="10" Text="{Binding InstanceString, Mode=OneWay}" Foreground="Blue" FontSize="10"/>

            </Grid>
        </HierarchicalDataTemplate>

        <Style x:Key="TreeItemForTypeNodes" TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
            <Style.Resources>
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#66000000"/>
                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="White"/>
                <SolidColorBrush x:Key="InactiveSelectionBrush" Color="White"/>
            </Style.Resources>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderThickness" Value="2"/>
                    <Setter Property="BorderBrush" Value="{StaticResource {x:Static SystemColors.ControlBrushKey}}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="true"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="BorderBrush" Value="{StaticResource {x:Static SystemColors.ControlBrushKey}}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <!-- TYPE SPCEIFIC: Tree View Item -->
        <Style x:Key="TreeItemForComponents" TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
            <Style.Resources>
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Blue"/>
                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="#FF82D3FF"/>
                <SolidColorBrush x:Key="InactiveSelectionBrush" Color="#FF82D3FF"/>
                <AlternationConverter x:Key="SpaceBgrConverter">
                    <SolidColorBrush Color="#FFf5f5f5"/>
                    <SolidColorBrush Color="#FFd9d9d9"/>
                </AlternationConverter>
            </Style.Resources>
            <!-- the Fucusable property makes sure only COMPONENTS can be selected ! -->
            <Setter Property="Focusable" Value="{Binding Converter={StaticResource IsVisibleComponentToBoolConverter}}"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="IsExpanded" Value="{Binding Path=IsExpanded, Mode=TwoWay}"/>
            <Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay}"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#00FFFFFF"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Background" Value="{Binding AlternationIndex, RelativeSource={RelativeSource Self}, Converter={StaticResource SpaceBgrConverter}}"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderThickness" Value="2"/>
                    <Setter Property="BorderBrush" Value="{StaticResource {x:Static SystemColors.HighlightBrushKey}}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="TreeItemForComponentMapping" TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
            <Style.Resources>
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#66000000"/>
                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="White"/>
                <SolidColorBrush x:Key="InactiveSelectionBrush" Color="White"/>
            </Style.Resources>
            <!-- the Fucusable property makes sure only COMPONENTS or PARAMETERS can be selected ! -->
            <Setter Property="Focusable" Value="{Binding Converter={StaticResource IsNotCalculationToBoolConverter}}"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderThickness" Value="2"/>
                    <Setter Property="BorderBrush" Value="{StaticResource {x:Static SystemColors.ControlBrushKey}}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="true"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="BorderBrush" Value="{StaticResource {x:Static SystemColors.ControlBrushKey}}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="TreeItemForComp2CompMapping" TargetType="{x:Type cbwpfu:TreeViewItemForMapping}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
            <Style.Resources>
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#66000000"/>
                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="White"/>
                <SolidColorBrush x:Key="InactiveSelectionBrush" Color="White"/>
            </Style.Resources>
            <!-- the Fucusable property makes sure only COMPONENTS or PARAMETERS can be selected ! -->
            <Setter Property="Focusable" Value="{Binding Converter={StaticResource IsNotCalculationToBoolConverter}}"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Style.Triggers>
                <Trigger Property="IsMarked" Value="True">
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="BorderBrush" Value="#FF967100"/>
                    <Setter Property="Background" Value="#44967100"/>
                </Trigger>
                <Trigger Property="IsMarkingInitiator" Value="True">
                    <Setter Property="BorderThickness" Value="2"/>
                    <Setter Property="BorderBrush" Value="#FF967100"/>
                    <Setter Property="Background" Value="#66967100"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderThickness" Value="2"/>
                    <Setter Property="BorderBrush" Value="{StaticResource {x:Static SystemColors.ControlBrushKey}}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="true"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="BorderBrush" Value="{StaticResource {x:Static SystemColors.ControlBrushKey}}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="TreeItemForNetworks" TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
            <Style.Resources>
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Blue"/>
                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="#FF82D3FF"/>
                <SolidColorBrush x:Key="InactiveSelectionBrush" Color="#FF82D3FF"/>
                <AlternationConverter x:Key="SpaceBgrConverter">
                    <SolidColorBrush Color="#FFf5f5f5"/>
                    <SolidColorBrush Color="#FFd9d9d9"/>
                </AlternationConverter>
            </Style.Resources>
            <!-- the Fucusable property makes sure only NETWORKS can be selected ! -->
            <Setter Property="Focusable" Value="{Binding Converter={StaticResource IsNetworkToBoolConverter}}"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="IsExpanded" Value="{Binding Path=IsExpanded, Mode=TwoWay}"/>
            <Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay}"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#00FFFFFF"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Background" Value="{Binding AlternationIndex, RelativeSource={RelativeSource Self}, Converter={StaticResource SpaceBgrConverter}}"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderThickness" Value="2"/>
                    <Setter Property="BorderBrush" Value="{StaticResource {x:Static SystemColors.HighlightBrushKey}}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type TreeViewItem}">
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
        </Style>

        <Style TargetType="{x:Type cbwpfu:TreeViewItemExt}">
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
        </Style>

        <Style TargetType="{x:Type cbwpfu:TreeViewItemForMapping}">
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
        </Style>

        <Style TargetType="{x:Type ListViewItem}">
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
        </Style>

    </Application.Resources>
</Application>
