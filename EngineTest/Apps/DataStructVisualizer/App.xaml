<Application x:Class="DataStructVisualizer.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:syscm="clr-namespace:System.ComponentModel;assembly=PresentationFramework"
             xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase"
             xmlns:dsv="clr-namespace:DataStructVisualizer"
             xmlns:dsvn="clr-namespace:DataStructVisualizer.Nodes"
             xmlns:dsvu="clr-namespace:DataStructVisualizer.WpfUtils"
             StartupUri="MainWindow.xaml">
    <Application.Resources>

        <sys:Boolean x:Key="FalseValue">False</sys:Boolean>
        <sys:Boolean x:Key="TrueValue">True</sys:Boolean>
        
        <!--diag:PresentationTraceSources.TraceLevel=High-->

        <dsvu:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
        <dsvu:BooleanToVisibiltyConverter x:Key="BooleanToVisibiltyConverter"/>
        <dsvu:BoolAndConverter x:Key="BoolAndConverter"/>
        <dsvu:DoubleToStringConverter x:Key="DoubleToStringConverter"/>
        <dsvu:DoubleStringToStringConverter x:Key="DoubleStringToStringConverter"/>
        <dsvn:WinMediaColorToSolidColorBrushConverter x:Key="WinMediaColorToSolidColorBrushConverter"/>
        <dsvn:NodeManagerTypeToDescriptionConverter x:Key="NodeManagerTypeToDescriptionConverter" />
        <dsvn:NodeManagerTypeToWinMediaColorConverter x:Key="NodeManagerTypeToWinMediaColorConverter"/>
        <dsvn:NodeManagerTypeToBackgrWinMediaColorConverter x:Key="NodeManagerTypeToBackgrWinMediaColorConverter"/>
        <dsvn:MultiCondToSolidColorBrushConverter x:Key="MultiCondToSolidColorBrushConverter"/>
        <dsvu:TreeDepthToOffsetConverter Factor="10" x:Key="TreeDepthToOffsetConverter" />
        <dsvu:TreeDepthToLengthConverter InitLength="240" Factor="-19" x:Key="TreeDepthToLengthConverter" />
        <dsvu:StringListToSmallStringListConverter x:Key="StringListToSmallStringListConverter"/>
        
        <dsvu:RectToThicknessConverter x:Key="RectToThicknessConverter"/>
        <dsvu:RectAndContextToThicknessConverter x:Key="RectAndContextToThicknessConverter"/>
        
        <dsvn:EditModeToBooleanConverter x:Key="EditModeToBooleanConverter"/>
        <dsvu:SortModeToBooleanConverter x:Key="SortModeToBooleanConverter"/>
        <dsvn:ParameterTypeToBooleanConverter x:Key="ParameterTypeToBooleanConverter"/>

        <dsvu:TreeViewSortingAccToParameterConverter x:Key="TreeViewSortingAccToParameterConverter"/>

        <dsvu:ValueConverterGroup x:Key="ReverseBoolToVisConverterGroup">
            <dsvu:InverseBooleanConverter/>
            <dsvu:BooleanToVisibiltyConverter/>
        </dsvu:ValueConverterGroup>

        <dsvu:ValueConverterGroup x:Key="ReverseEditModeToBoolConverterGroup">
            <dsvn:EditModeToBooleanConverter/>
            <dsvu:InverseBooleanConverter/>
        </dsvu:ValueConverterGroup>
        
        <dsvu:ValueConverterGroup x:Key="ReverseEditModeToVisConverterGroup">
            <dsvn:EditModeToBooleanConverter/>
            <dsvu:InverseBooleanConverter/>
            <dsvu:BooleanToVisibiltyConverter/>
        </dsvu:ValueConverterGroup>
        
        <dsvu:ValueConverterGroup x:Key="SortModeToVisibiltyConverterGroup">
            <dsvu:SortModeToBooleanConverter/>
            <dsvu:BooleanToVisibiltyConverter/>
        </dsvu:ValueConverterGroup>
        
        <dsvu:ValueConverterGroup x:Key="ParameterTypeToVisibilityConverterGroup">
            <dsvn:ParameterTypeToBooleanConverter/>
            <dsvu:BooleanToVisibiltyConverter/>
        </dsvu:ValueConverterGroup>

        <Storyboard x:Key="sb_Image_Move_X" TargetProperty="RenderTransform.(TranslateTransform.X)" RepeatBehavior="1x">
            <DoubleAnimation From="-144" To="-144" BeginTime="0:0:0"     Duration="0:0:0.25"/>
            <DoubleAnimation From="-144" To="-120" BeginTime="0:0:0.25"  Duration="0:0:0.001"/>
            <DoubleAnimation From="-120" To="-120" BeginTime="0:0:0.251" Duration="0:0:0.25"/>
            <DoubleAnimation From="-120" To="-96"  BeginTime="0:0:0.501" Duration="0:0:0.001"/>
            <DoubleAnimation From="-96"  To="-96"  BeginTime="0:0:0.502" Duration="0:0:0.25"/>
            <DoubleAnimation From="-96"  To="-72"  BeginTime="0:0:0.752" Duration="0:0:0.001"/>
            <DoubleAnimation From="-72"  To="-72"  BeginTime="0:0:0.753" Duration="0:0:0.25"/>
            <DoubleAnimation From="-72"  To="-48"  BeginTime="0:0:1.003" Duration="0:0:0.001"/>
            <DoubleAnimation From="-48"  To="-48"  BeginTime="0:0:1.004" Duration="0:0:0.25"/>
            <DoubleAnimation From="-48"  To="-24"  BeginTime="0:0:1.254" Duration="0:0:0.001"/>
            <DoubleAnimation From="-24"  To="-24"  BeginTime="0:0:1.255" Duration="0:0:0.25"/>
            <DoubleAnimation From="-24"  To="0"    BeginTime="0:0:1.505" Duration="0:0:0.001"/>
            <DoubleAnimation From="0"    To="0"    BeginTime="0:0:1.506" Duration="0:0:0.25"/>
        </Storyboard>

        <Storyboard x:Key="sb_Image_Clip_X" RepeatBehavior="1x">
            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Clip" Duration="0:0:1.756">
                <DiscreteObjectKeyFrame KeyTime="0:0:0">
                    <DiscreteObjectKeyFrame.Value><RectangleGeometry Rect="144,0,24,24"/></DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
                <DiscreteObjectKeyFrame KeyTime="0:0:0.25">
                    <DiscreteObjectKeyFrame.Value><RectangleGeometry Rect="144,0,24,24"/></DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
                <DiscreteObjectKeyFrame KeyTime="0:0:0.251">
                    <DiscreteObjectKeyFrame.Value><RectangleGeometry Rect="120,0,24,24"/></DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
                <DiscreteObjectKeyFrame KeyTime="0:0:0.501">
                    <DiscreteObjectKeyFrame.Value><RectangleGeometry Rect="120,0,24,24"/></DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
                <DiscreteObjectKeyFrame KeyTime="0:0:0.502">
                    <DiscreteObjectKeyFrame.Value><RectangleGeometry Rect="96,0,24,24"/></DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
                <DiscreteObjectKeyFrame KeyTime="0:0:0.752">
                    <DiscreteObjectKeyFrame.Value><RectangleGeometry Rect="96,0,24,24"/></DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
                <DiscreteObjectKeyFrame KeyTime="0:0:0.753">
                    <DiscreteObjectKeyFrame.Value><RectangleGeometry Rect="72,0,24,24"/></DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
                <DiscreteObjectKeyFrame KeyTime="0:0:1.003">
                    <DiscreteObjectKeyFrame.Value><RectangleGeometry Rect="72,0,24,24"/></DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
                <DiscreteObjectKeyFrame KeyTime="0:0:1.004">
                    <DiscreteObjectKeyFrame.Value><RectangleGeometry Rect="48,0,24,24"/></DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
                <DiscreteObjectKeyFrame KeyTime="0:0:1.254">
                    <DiscreteObjectKeyFrame.Value><RectangleGeometry Rect="48,0,24,24"/></DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
                <DiscreteObjectKeyFrame KeyTime="0:0:1.255">
                    <DiscreteObjectKeyFrame.Value><RectangleGeometry Rect="24,0,24,24"/></DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
                <DiscreteObjectKeyFrame KeyTime="0:0:1.505">
                    <DiscreteObjectKeyFrame.Value><RectangleGeometry Rect="24,0,24,24"/></DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
                <DiscreteObjectKeyFrame KeyTime="0:0:1.506">
                    <DiscreteObjectKeyFrame.Value><RectangleGeometry Rect="0,0,24,24"/></DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
            </ObjectAnimationUsingKeyFrames>
        </Storyboard>

        <Style x:Key="MainExpander" TargetType="{x:Type Expander}">
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Top"/>
            <Setter Property="Width" Value="Auto"/>
            <Setter Property="Margin" Value="10"/>
            <Setter Property="BorderBrush" Value="Black"/>
            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Opacity="1" Color="Gainsboro"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="syscm:DesignerProperties.IsInDesignMode"  Value="True">
                    <Setter Property="Visibility" Value="Visible"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="ReliefButton" TargetType="Button">
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="#FFDADADA" Offset="0"/>
                        <GradientStop Color="White" Offset="0.15"/>
                        <GradientStop Color="#FFDADADA" Offset="0.20"/>
                        <GradientStop Color="#FFAAAAAA" Offset="0.85"/>
                        <GradientStop Color="#FF595959" Offset="1"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="Black"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="#FFBFBFBF"/>
                    <Setter Property="BorderBrush" Value="#FF919191"/>
                    <Setter Property="Foreground" Value="#FF898989"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="#FFFFD35F"/>
                    <Setter Property="BorderBrush" Value="White"/>
                    <Setter Property="Foreground" Value="White"/>
                </Trigger>
            </Style.Triggers>
            <Style.Resources>
                <Style TargetType="Image">
                    <Style.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.35" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Style.Resources>
        </Style>

        <Style x:Key="SortButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
            <Setter Property="Width" Value="19"/>
            <Setter Property="Height" Value="19"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="BorderBrush" Value="#FFDDDDDD"/>            
            <Setter Property="Content">
                <Setter.Value>
                    <Image Height="15" Source="./Data/icons/sort_inactive.png"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Tag">
                    <Trigger.Value>
                        <sys:Int32>-1</sys:Int32>
                    </Trigger.Value>
                    <Setter Property="Content">
                        <Setter.Value>
                            <Image Height="15" Source="./Data/icons/sort_inactive.png"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <Trigger Property="Tag">
                    <Trigger.Value>
                        <sys:Int32>0</sys:Int32>
                    </Trigger.Value>
                    <Setter Property="Content">
                        <Setter.Value>
                            <Image Height="15" Source="./Data/icons/sort_neutral.png"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <Trigger Property="Tag">
                    <Trigger.Value>
                        <sys:Int32>1</sys:Int32>
                    </Trigger.Value>
                    <Setter Property="Content">
                        <Setter.Value>
                            <Image Height="15" Source="./Data/icons/sort_asc.png"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <Trigger Property="Tag">
                    <Trigger.Value>
                        <sys:Int32>2</sys:Int32>
                    </Trigger.Value>
                    <Setter Property="Content">
                        <Setter.Value>
                            <Image Height="15" Source="./Data/icons/sort_desc.png"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="ToggleButtonLight" TargetType="ToggleButton">
            <Setter Property="Height" Value="25"/>
            <Setter Property="Width" Value="70"/>
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="#FFDADADA" Offset="0"/>
                        <GradientStop Color="White" Offset="0.15"/>
                        <GradientStop Color="#FFDADADA" Offset="0.20"/>
                        <GradientStop Color="#FFAAAAAA" Offset="0.85"/>
                        <GradientStop Color="#FF595959" Offset="1"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="Black"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="#FF2C2C2C"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                <GradientStop Color="#FF919191" Offset="0"/>
                                <GradientStop Color="#FFC37C00" Offset="0.154"/>
                                <GradientStop Color="#FFC9A274" Offset="0.854"/>
                                <GradientStop Color="#FFDADADA" Offset="0.95"/>
                                <GradientStop Color="#FFB6B6B6" Offset="1"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="BorderBrush" Value="#FFFFD35F"/>
                    <Setter Property="BorderThickness" Value="3"/>
                    <Setter Property="Foreground" Value="White"/>
                    <Setter Property="FontWeight" Value="Bold"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2">
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="#FFDADADA"/>
                    <Setter Property="BorderBrush" Value="#FF919191"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="Foreground" Value="DimGray"/>
                    <Setter Property="FontWeight" Value="Normal"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2">
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
            <Style.Resources>
                <Style TargetType="Image">
                    <Style.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.35" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Style.Resources>
        </Style>

        <Style x:Key="CoordinateInput" TargetType="TextBox">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="bg" BorderBrush="Black" BorderThickness="1">
                            <ScrollViewer x:Name="PART_ContentHost" 
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                        Background="White"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="PART_ContentHost" Value="#FFFFE6B9"/>
                                <Setter Property="BorderBrush" TargetName="bg" Value="Orange"/>
                                <Setter Property="BorderThickness" TargetName="bg" Value="2"/>
                                <Setter Property="Padding" Value="2,-1,2,2"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" TargetName="PART_ContentHost" Value="LightGray"/>
                                <Setter Property="BorderBrush" TargetName="bg" Value="#FF8D8D8D"/>
                                <Setter Property="BorderThickness" TargetName="bg" Value="1"/>
                            </Trigger>
                            <EventTrigger RoutedEvent="Border.MouseDown" SourceName="PART_ContentHost">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="#FFFFC558" 
                                                         Duration="0:0:0.2"
                                                         Storyboard.TargetName="PART_ContentHost" 
                                                         Storyboard.TargetProperty="Background.Color"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="Border.GotFocus" SourceName="PART_ContentHost">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="#FFFFC558" 
                                                         Duration="0:0:0.2"
                                                         Storyboard.TargetName="PART_ContentHost" 
                                                         Storyboard.TargetProperty="Background.Color"/>
                                        <ColorAnimation To="Orange" 
                                                         Duration="0:0:0.2"
                                                         Storyboard.TargetName="bg" 
                                                         Storyboard.TargetProperty="BorderBrush.Color"/>
                                        <!--<ThicknessAnimation To="2" 
                                                         Duration="0:0:0.2"
                                                         Storyboard.TargetName="bg" 
                                                         Storyboard.TargetProperty="BorderThickness"/>-->
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="Border.LostFocus" SourceName="PART_ContentHost">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="#ffccff99" 
                                                         Duration="0:0:0.2"
                                                         Storyboard.TargetName="PART_ContentHost" 
                                                         Storyboard.TargetProperty="Background.Color"/>
                                        <ColorAnimation To="DarkGreen" 
                                                         Duration="0:0:0.2"
                                                         Storyboard.TargetName="bg" 
                                                         Storyboard.TargetProperty="BorderBrush.Color"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Top"/>
            <!--<Setter Property="Width" Value="45"/>-->
            <Setter Property="Height" Value="20"/>
            <Setter Property="TextAlignment" Value="Center"/>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="#FF8D8D8D"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="FontWeight" Value="Bold"/>
                </Trigger>
            </Style.Triggers>

        </Style>

        <DataTemplate x:Key="NodeManagerTypeforList" DataType="{x:Type dsvn:NodeManagerType}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="5"/>
                    <ColumnDefinition MinWidth="120"/>
                </Grid.ColumnDefinitions>
                <Rectangle Grid.Column="0" Width="10" Height="10" RadiusX="2" RadiusY="2">
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{Binding Converter={StaticResource NodeManagerTypeToWinMediaColorConverter}}"/>
                    </Rectangle.Fill>
                </Rectangle>

                <Rectangle Grid.Column="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                           StrokeThickness="1" RadiusX="2" RadiusY="2">
                    <Rectangle.Stroke>
                        <SolidColorBrush Color="{Binding Converter={StaticResource NodeManagerTypeToWinMediaColorConverter}}"/>
                    </Rectangle.Stroke>
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{Binding Converter={StaticResource NodeManagerTypeToWinMediaColorConverter}}" Opacity="0.25"/>
                    </Rectangle.Fill>
                </Rectangle>
                <TextBlock Grid.Column="2" Text="{Binding Converter={StaticResource NodeManagerTypeToDescriptionConverter}}"
                           Padding="5,2">
                    <TextBlock.Foreground>
                        <SolidColorBrush Color="{Binding Converter={StaticResource NodeManagerTypeToWinMediaColorConverter}}"/>
                    </TextBlock.Foreground>
                </TextBlock>
                
            </Grid>
        </DataTemplate>

        <HierarchicalDataTemplate x:Key="NodeInTreeView" DataType="{x:Type dsvn:Node}" ItemsSource="{Binding Path=ContainedNodes, Mode=OneWay}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" MinWidth="16"/>
                    <ColumnDefinition Width="2"/>
                    <ColumnDefinition Width="Auto" MinWidth="16"/>
                    <ColumnDefinition Width="2"/>
                    <ColumnDefinition Width="Auto" MinWidth="16"/>
                    <ColumnDefinition Width="4"/>
                    <ColumnDefinition Width="Auto" MinWidth="{Binding Converter={StaticResource TreeDepthToLengthConverter}, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}"/>
                    <ColumnDefinition Width="150"/>
                    <ColumnDefinition Width="90"/>
                    <ColumnDefinition Width="150"/>
                    <ColumnDefinition Width="90"/>
                    <ColumnDefinition Width="130"/>
                    <ColumnDefinition Width="90"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                
                <!-- HELPER: cannot find out what overrides the background brush when node is selected but lost focus ... -->
                <Rectangle Grid.Column="0" Grid.ColumnSpan="12" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                           Fill="Orange" Opacity="0.5"
                           Visibility="{Binding Path=IsSelected, Converter={StaticResource BooleanToVisibiltyConverter}, Mode=OneWay}"/>

                <!-- selection of child indicator -->
                <Border Grid.Column="0" Grid.ColumnSpan="12" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                           BorderBrush="Goldenrod" BorderThickness="0,0,0,2"
                           Visibility="{Binding IsParentOfSelected, Converter={StaticResource BooleanToVisibiltyConverter}, Mode=OneWay}"/>
                
                <!-- geometry -->
                <Image Grid.Column="0" Source="./Data/space_volYES.png" Width="16" Height="16"
                       ToolTip="Node has Geometry"
                       Visibility="{Binding Path=HasGeometry, Converter={StaticResource BooleanToVisibiltyConverter}, Mode=OneWay}"/>
               
                <!-- synchronization -->
                <Image Grid.Column="2" Source="./Data/icons/node_sync.png" Width="16" Height="16"
                       ToolTip="Node is synchronized&#x0a;with all synchronized&#x0a;Nodes by the same Name.&#x0a;Double Click to turn it off."
                       Visibility="{Binding Path=SyncByName, Converter={StaticResource BooleanToVisibiltyConverter}, Mode=OneWay}">
                    <Image.InputBindings>
                        <MouseBinding MouseAction="LeftDoubleClick" CommandParameter="{Binding Mode=OneWay}" Command="{Binding DataContext.TurnOffSyncCmd, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dsv:MainWindow}}}"/>
                    </Image.InputBindings>
                </Image>
                <Image Grid.Column="2" Source="./Data/icons/node_sync_off.png" Width="16" Height="16"
                       ToolTip="Node is not synchronized"
                       Visibility="{Binding Path=SyncByName, Converter={StaticResource ReverseBoolToVisConverterGroup}, Mode=OneWay}"/>
                
                <!-- parameter type : IN, OUT, NONE -->
                <StackPanel Grid.Column="4">
                    <Image Source="./Data/icons/node_param_NONE.png" Width="16" Height="16" 
                           Visibility="{Binding NodeParamType, Converter={StaticResource ParameterTypeToVisibilityConverterGroup}, ConverterParameter=NONE}"
                           ToolTip="Container"/>
                    <Image Source="./Data/icons/node_param_INd_1.png" Width="16" Height="16" 
                           Visibility="{Binding NodeParamType, Converter={StaticResource ParameterTypeToVisibilityConverterGroup}, ConverterParameter=IN}"
                           ToolTip="Input"/>
                    <Image Source="./Data/icons/node_param_IN.png" Width="16" Height="16" 
                           Visibility="{Binding NodeParamType, Converter={StaticResource ParameterTypeToVisibilityConverterGroup}, ConverterParameter=IN_DONE}"
                           ToolTip="Input Done"/>
                    <Image Source="./Data/icons/node_param_OUTd_1.png" Width="16" Height="16" 
                           Visibility="{Binding NodeParamType, Converter={StaticResource ParameterTypeToVisibilityConverterGroup}, ConverterParameter=OUT}"
                           ToolTip="Output"/>
                    <Image Source="./Data/icons/node_param_OUT.png" Width="16" Height="16" 
                           Visibility="{Binding NodeParamType, Converter={StaticResource ParameterTypeToVisibilityConverterGroup}, ConverterParameter=OUT_DONE}"
                           ToolTip="Output Done"/>
                    <Image Source="./Data/icons/node_param_DEF.png" Width="16" Height="16" 
                           Visibility="{Binding NodeParamType, Converter={StaticResource ParameterTypeToVisibilityConverterGroup}, ConverterParameter=DEFINITION}"
                           ToolTip="Definition"/>
                    <Image Source="./Data/icons/node_param_REF.png" Width="16" Height="16" 
                           Visibility="{Binding NodeParamType, Converter={StaticResource ParameterTypeToVisibilityConverterGroup}, ConverterParameter=REFERENCE}"
                           ToolTip="Reference"/>
                    <Image Source="./Data/icons/node_param_FCT.png" Width="16" Height="16" 
                           Visibility="{Binding NodeParamType, Converter={StaticResource ParameterTypeToVisibilityConverterGroup}, ConverterParameter=METHOD}"
                           ToolTip="Method"/>
                    <StackPanel.InputBindings>
                        <MouseBinding MouseAction="LeftClick" CommandParameter="{Binding Mode=OneWay}" Command="{Binding DataContext.ToggleParameterTypeCmd, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dsv:MainWindow}}}"/>
                        <MouseBinding Gesture="Shift+LeftClick" CommandParameter="{Binding Mode=OneWay}" Command="{Binding DataContext.ToggleParameterTypeBackCmd, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dsv:MainWindow}}}"/>
                    </StackPanel.InputBindings>
                </StackPanel>

                <TextBlock Grid.Column="6" Text="{Binding NodeName}" FontWeight="{Binding NodeWeight}"
                           Foreground="{Binding NodeColor, Converter={StaticResource WinMediaColorToSolidColorBrushConverter}}"/>

                <TextBlock Grid.Column="7" Text="{Binding NodeDescr}" FontWeight="{Binding NodeWeight}">
                    <TextBlock.Foreground>
                        <MultiBinding Converter="{StaticResource MultiCondToSolidColorBrushConverter}">
                            <Binding Path="NodeColor" Mode="OneWay"/>
                            <Binding Path="NodeDescr" Mode="OneWay"/>
                        </MultiBinding>
                    </TextBlock.Foreground>
                </TextBlock>

                <TextBlock Grid.Column="8" Text="{Binding NodeUnit}" FontWeight="{Binding NodeWeight}" 
                           Foreground="{Binding NodeColor, Converter={StaticResource WinMediaColorToSolidColorBrushConverter}}"/>

                <TextBlock Grid.Column="9" Text="{Binding NodeDefaultVal}" FontWeight="{Binding NodeWeight}"
                           Foreground="{Binding NodeColor, Converter={StaticResource WinMediaColorToSolidColorBrushConverter}}"
                           ToolTip="{Binding NodeDefaultVal}"/>

                <TextBlock Grid.Column="10" Text="{Binding NodeSource}" FontWeight="{Binding NodeWeight}"
                           Foreground="{Binding NodeColor, Converter={StaticResource WinMediaColorToSolidColorBrushConverter}}"/>

                <Rectangle Grid.Column="11" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                           StrokeThickness="1" RadiusX="2" RadiusY="2">
                    <Rectangle.Stroke>
                        <SolidColorBrush Color="{Binding NodeManager, Converter={StaticResource NodeManagerTypeToWinMediaColorConverter}}"/>
                    </Rectangle.Stroke>
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{Binding NodeManager, Converter={StaticResource NodeManagerTypeToBackgrWinMediaColorConverter}}"/>
                    </Rectangle.Fill>
                </Rectangle>
                <TextBlock Grid.Column="11" FontWeight="Bold" Padding="5,0,0,0"
                           Text="{Binding NodeManager, Converter={StaticResource NodeManagerTypeToDescriptionConverter}}" >
                    <TextBlock.Foreground>
                        <SolidColorBrush Color="{Binding NodeManager, Converter={StaticResource NodeManagerTypeToWinMediaColorConverter}}"/>
                    </TextBlock.Foreground>
                </TextBlock>

                <!-- line numbers -->
                <TextBlock Grid.Column="12" Padding="4,0,0,0" Background="PaleGoldenrod" Foreground="#ffb5830b"
                           Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeViewItem}}, Path=Tag}"/>
                <!-- selection indicator in the line numbers -->
                <Rectangle Grid.Column="12" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                           Stroke="Black" StrokeThickness="2" Fill="Orange" Opacity="0.35"
                           Visibility="{Binding IsSelected, Converter={StaticResource BooleanToVisibiltyConverter}, Mode=OneWay}"/>
                <!-- selection of child indicator in the line numbers -->
                <Rectangle Grid.Column="12" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                           Stroke="Black" StrokeThickness="1" Fill="Goldenrod" Opacity="0.25"
                           Visibility="{Binding IsParentOfSelected, Converter={StaticResource BooleanToVisibiltyConverter}, Mode=OneWay}"/>             
                
            </Grid>
        </HierarchicalDataTemplate>

        <DataTemplate x:Key="NodeInList" DataType="{x:Type dsvn:Node}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" MinWidth="16"/>
                    <ColumnDefinition Width="4"/>
                    <ColumnDefinition Width="Auto" MinWidth="16"/>
                    <ColumnDefinition Width="4"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="4"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>

                <Image Grid.Column="0" Source="./Data/space_volYES.png" Width="16" Height="16"
                       ToolTip="Node has Geometry"
                       Visibility="{Binding Path=HasGeometry, Converter={StaticResource BooleanToVisibiltyConverter}, Mode=OneWay}"/>

                <Image Grid.Column="2" Source="./Data/icons/node_sync.png" Width="16" Height="16"
                       ToolTip="Node is synchronized&#x0a;with all synchronized&#x0a;Nodes by the same Name"
                       Visibility="{Binding Path=SyncByName, Converter={StaticResource BooleanToVisibiltyConverter}, Mode=OneWay}"/>

                <TextBlock Grid.Column="4" Text="{Binding NodeName}" FontWeight="Bold"/>

                <TextBlock Grid.Column="6" Text="{Binding NodeDescr, StringFormat=( {0})}" FontStyle="Italic"/>

            </Grid>
        </DataTemplate>

        <Style x:Key="TreeItemForNodes" TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
            <Style.Resources>
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Orange"/>
                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="#FFFFD382"/>
                <SolidColorBrush x:Key="InactiveSelectionBrush" Color="#FFFFD382"/>
                <AlternationConverter x:Key="SpaceBgrConverter">
                    <SolidColorBrush Color="LightGoldenrodYellow"/>
                    <SolidColorBrush Color="PaleGoldenrod"/>
                </AlternationConverter>
            </Style.Resources>
            <!--<Setter Property="Grid.Margin" Value="{Binding Converter={StaticResource TreeDepthToOffsetConverter}, RelativeSource={RelativeSource Self}}"/>-->
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="IsExpanded" Value="{Binding Path=IsExpanded, Mode=TwoWay}"/>
            <Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay}"/>
            <Style.Triggers>                
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#00FFFFFF"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Background" Value="{Binding AlternationIndex, RelativeSource={RelativeSource Self}, Converter={StaticResource SpaceBgrConverter}}"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <!--<Setter Property="Background" Value="{StaticResource InactiveSelectionBrush}"/>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>-->
                    <Setter Property="BorderThickness" Value="2"/>
                    <Setter Property="BorderBrush" Value="{StaticResource {x:Static SystemColors.HighlightBrushKey}}"/>
                </MultiTrigger>                
            </Style.Triggers>
        </Style>

    </Application.Resources>
</Application>
